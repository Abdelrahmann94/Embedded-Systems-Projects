
SLAVE_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000365e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  0000365e  000036f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080009c  0080009c  0000372e  2**0
                  ALLOC
  3 .stab         00003ccc  00000000  00000000  00003730  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002065  00000000  00000000  000073fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009461  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000095a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009711  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b35a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c245  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dbaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__vector_1>
       8:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__vector_2>
       c:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <main>
      8a:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e9       	ldi	r26, 0x93	; 147
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 12 1b 	jmp	0x3624	; 0x3624 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e9       	ldi	r24, 0x93	; 147
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 12 1b 	jmp	0x3624	; 0x3624 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 22 1b 	jmp	0x3644	; 0x3644 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInit>:
#include "../Include/UART_interface.h"
#include "../Include/UART_private.h"
#include "../Include/UART_config.h"

void UART_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_voidInit+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
    u8 local_u8TempReg = 0x80;
     b52:	80 e8       	ldi	r24, 0x80	; 128
     b54:	8b 83       	std	Y+3, r24	; 0x03
    u16 local_u16BuadValue = 51;
     b56:	83 e3       	ldi	r24, 0x33	; 51
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
    /* config boad rate */
    CLR_BIT(UART_u8_UCSRA_REG,UART_u8_U2X_BIT);
     b5e:	ab e2       	ldi	r26, 0x2B	; 43
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	eb e2       	ldi	r30, 0x2B	; 43
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	8d 7f       	andi	r24, 0xFD	; 253
     b6a:	8c 93       	st	X, r24
    UART_u8_UBRRL_REG = (u8)local_u16BuadValue;
     b6c:	e9 e2       	ldi	r30, 0x29	; 41
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	80 83       	st	Z, r24
    UART_u8_UBRRH_REG = (u8)(local_u16BuadValue>>8);
     b74:	e0 e4       	ldi	r30, 0x40	; 64
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	89 2f       	mov	r24, r25
     b7e:	99 27       	eor	r25, r25
     b80:	80 83       	st	Z, r24
    /* disable to MPCM */
    CLR_BIT(UART_u8_UCSRA_REG,UART_u8_MPCM_BIT);
     b82:	ab e2       	ldi	r26, 0x2B	; 43
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	eb e2       	ldi	r30, 0x2B	; 43
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	8e 7f       	andi	r24, 0xFE	; 254
     b8e:	8c 93       	st	X, r24
    /* config the UART mode */
    #if   UART_u8_MODE == UART_ASYNCH_MODE  // in case synch mode
        CLR_BIT(local_u8TempReg,UART_u8_UMSEL_BIT);
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	8f 7b       	andi	r24, 0xBF	; 191
     b94:	8b 83       	std	Y+3, r24	; 0x03
        SET_BIT(local_u8TempReg,UART_u8_UPM1_BIT);
    #elif UART_u8_PARITY_MODE == UART_ODD_PARITY  // in case odd parity
        SET_BIT(local_u8TempReg,UART_u8_UPM0_BIT);
        SET_BIT(local_u8TempReg,UART_u8_UPM1_BIT);
    #elif UART_u8_PARITY_MODE == UART_DISABLED_PARITY  // in case disabled
        CLR_BIT(local_u8TempReg,UART_u8_UPM0_BIT);
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	8f 7e       	andi	r24, 0xEF	; 239
     b9a:	8b 83       	std	Y+3, r24	; 0x03
        CLR_BIT(local_u8TempReg,UART_u8_UPM1_BIT);
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	8b 83       	std	Y+3, r24	; 0x03
    #endif
    /* config the stop bit mode */
    #if   UART_u8_STOP_MODE == UART_STOP_BIT_1  // in case 1 bit
        CLR_BIT(local_u8TempReg,UART_u8_USBS_BIT);
    #elif UART_u8_STOP_MODE == UART_STOP_BIT_2  // in case 2 bit
        SET_BIT(local_u8TempReg,UART_u8_USBS_BIT);
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	88 60       	ori	r24, 0x08	; 8
     ba6:	8b 83       	std	Y+3, r24	; 0x03
    #elif UART_u8_DATA_BIT == UART_DATA_7_BIT  // in case 7 bit data
        CLR_BIT(local_u8TempReg,UART_u8_UCSZ0_BIT);
        SET_BIT(local_u8TempReg,UART_u8_UCSZ1_BIT);
        CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSZ2_BIT);
    #elif UART_u8_DATA_BIT == UART_DATA_8_BIT  // in case 8 bit data
        SET_BIT(local_u8TempReg,UART_u8_UCSZ0_BIT);
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	82 60       	ori	r24, 0x02	; 2
     bac:	8b 83       	std	Y+3, r24	; 0x03
        SET_BIT(local_u8TempReg,UART_u8_UCSZ1_BIT);
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	84 60       	ori	r24, 0x04	; 4
     bb2:	8b 83       	std	Y+3, r24	; 0x03
        CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSZ2_BIT);
     bb4:	aa e2       	ldi	r26, 0x2A	; 42
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e2       	ldi	r30, 0x2A	; 42
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8b 7f       	andi	r24, 0xFB	; 251
     bc0:	8c 93       	st	X, r24
        SET_BIT(local_u8TempReg,UART_u8_UCSZ0_BIT);
        SET_BIT(local_u8TempReg,UART_u8_UCSZ1_BIT);
        SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSZ2_BIT);
    #endif
    /* set local variable in the UCSRC register */
    UART_u8_UCSRC_REG = local_u8TempReg;
     bc2:	e0 e4       	ldi	r30, 0x40	; 64
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	80 83       	st	Z, r24
    /* Enable Transmitter and Receiver */
    SET_BIT(UART_u8_UCSRB_REG,UART_u8_TXEN_BIT);
     bca:	aa e2       	ldi	r26, 0x2A	; 42
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	ea e2       	ldi	r30, 0x2A	; 42
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	88 60       	ori	r24, 0x08	; 8
     bd6:	8c 93       	st	X, r24
    SET_BIT(UART_u8_UCSRB_REG,UART_u8_RXEN_BIT);
     bd8:	aa e2       	ldi	r26, 0x2A	; 42
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	ea e2       	ldi	r30, 0x2A	; 42
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 61       	ori	r24, 0x10	; 16
     be4:	8c 93       	st	X, r24
}
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <UART_UARTEnumSendData>:

UARTEnum UART_UARTEnumSendData(u8 copy_u8Data)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <UART_UARTEnumSendData+0x6>
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	8a 83       	std	Y+2, r24	; 0x02
    UARTEnum local_UARTEnumErrorState = UART_TX_OK;
     bfe:	19 82       	std	Y+1, r1	; 0x01
    if(copy_u8Data <= 255)
    {
        /* wait until the register is empty */
        while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT) == 0);
     c00:	eb e2       	ldi	r30, 0x2B	; 43
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	82 95       	swap	r24
     c08:	86 95       	lsr	r24
     c0a:	87 70       	andi	r24, 0x07	; 7
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	81 70       	andi	r24, 0x01	; 1
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	00 97       	sbiw	r24, 0x00	; 0
     c16:	a1 f3       	breq	.-24     	; 0xc00 <UART_UARTEnumSendData+0xe>
        /* send the data */
        UART_u8_UDR_REG = copy_u8Data;
     c18:	ec e2       	ldi	r30, 0x2C	; 44
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	80 83       	st	Z, r24
    }
    else
    {
        local_UARTEnumErrorState = UART_TX_NOK;
    }
    return local_UARTEnumErrorState;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <UART_UARTEnumReceiveData>:

UARTEnum UART_UARTEnumReceiveData(pu8 copy_pu8Data)
{
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	00 d0       	rcall	.+0      	; 0xc32 <UART_UARTEnumReceiveData+0x6>
     c32:	0f 92       	push	r0
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	9b 83       	std	Y+3, r25	; 0x03
     c3a:	8a 83       	std	Y+2, r24	; 0x02
    UARTEnum local_UARTEnumErrorState = UART_RX_OK;
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	89 83       	std	Y+1, r24	; 0x01
    if(copy_pu8Data != NULL)
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	9b 81       	ldd	r25, Y+3	; 0x03
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	61 f0       	breq	.+24     	; 0xc60 <UART_UARTEnumReceiveData+0x34>
    {
        /* wait until the receive is completed */
        while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_RXC_BIT) == 0);
     c48:	eb e2       	ldi	r30, 0x2B	; 43
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	88 23       	and	r24, r24
     c50:	dc f7       	brge	.-10     	; 0xc48 <UART_UARTEnumReceiveData+0x1c>
        /* receive the data */
        *copy_pu8Data = UART_u8_UDR_REG ;
     c52:	ec e2       	ldi	r30, 0x2C	; 44
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	ea 81       	ldd	r30, Y+2	; 0x02
     c5a:	fb 81       	ldd	r31, Y+3	; 0x03
     c5c:	80 83       	st	Z, r24
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <UART_UARTEnumReceiveData+0x38>
    }
    else
    {
        local_UARTEnumErrorState = UART_RX_NOK;
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_UARTEnumErrorState;
     c64:	89 81       	ldd	r24, Y+1	; 0x01
}
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <UART_UARTEnumSendString>:

UARTEnum UART_UARTEnumSendString(pu8 copy_pu8SendString)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	00 d0       	rcall	.+0      	; 0xc78 <UART_UARTEnumSendString+0x6>
     c78:	00 d0       	rcall	.+0      	; 0xc7a <UART_UARTEnumSendString+0x8>
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	9c 83       	std	Y+4, r25	; 0x04
     c80:	8b 83       	std	Y+3, r24	; 0x03
    UARTEnum local_UARTEnumErrorState = UART_TXSTR_OK;
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Count = 0;
     c86:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8SendString != NULL)
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	9c 81       	ldd	r25, Y+4	; 0x04
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	a1 f1       	breq	.+104    	; 0xcf8 <UART_UARTEnumSendString+0x86>
    {
        /* wait until the register is empty */
        while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT) == 0);
     c90:	eb e2       	ldi	r30, 0x2B	; 43
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	82 95       	swap	r24
     c98:	86 95       	lsr	r24
     c9a:	87 70       	andi	r24, 0x07	; 7
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	81 70       	andi	r24, 0x01	; 1
     ca2:	90 70       	andi	r25, 0x00	; 0
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	a1 f3       	breq	.-24     	; 0xc90 <UART_UARTEnumSendString+0x1e>
     ca8:	1b c0       	rjmp	.+54     	; 0xce0 <UART_UARTEnumSendString+0x6e>
        while(copy_pu8SendString[local_u8Count] != '\0')
        {
            /* send the data */
            UART_u8_UDR_REG = copy_pu8SendString[local_u8Count];
     caa:	ac e2       	ldi	r26, 0x2C	; 44
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	fc 01       	movw	r30, r24
     cba:	e2 0f       	add	r30, r18
     cbc:	f3 1f       	adc	r31, r19
     cbe:	80 81       	ld	r24, Z
     cc0:	8c 93       	st	X, r24
            /* wait until the transmitter is completed */
            while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT) == 0);
     cc2:	eb e2       	ldi	r30, 0x2B	; 43
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	82 95       	swap	r24
     cca:	86 95       	lsr	r24
     ccc:	87 70       	andi	r24, 0x07	; 7
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	81 70       	andi	r24, 0x01	; 1
     cd4:	90 70       	andi	r25, 0x00	; 0
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	a1 f3       	breq	.-24     	; 0xcc2 <UART_UARTEnumSendString+0x50>
            local_u8Count++;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	8f 5f       	subi	r24, 0xFF	; 255
     cde:	89 83       	std	Y+1, r24	; 0x01
    u8 local_u8Count = 0;
    if(copy_pu8SendString != NULL)
    {
        /* wait until the register is empty */
        while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT) == 0);
        while(copy_pu8SendString[local_u8Count] != '\0')
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	fc 01       	movw	r30, r24
     cec:	e2 0f       	add	r30, r18
     cee:	f3 1f       	adc	r31, r19
     cf0:	80 81       	ld	r24, Z
     cf2:	88 23       	and	r24, r24
     cf4:	d1 f6       	brne	.-76     	; 0xcaa <UART_UARTEnumSendString+0x38>
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <UART_UARTEnumSendString+0x8a>
            local_u8Count++;
        }
    }
    else
    {
        local_UARTEnumErrorState = UART_TXSTR_NOK;
     cf8:	85 e0       	ldi	r24, 0x05	; 5
     cfa:	8a 83       	std	Y+2, r24	; 0x02
    }
    return local_UARTEnumErrorState;
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <UART_UARTEnumReceiveString>:

UARTEnum UART_UARTEnumReceiveString(pu8 copy_pu8ReceiveString,u8 copy_u8StringLenth)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <UART_UARTEnumReceiveString+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <UART_UARTEnumReceiveString+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	9c 83       	std	Y+4, r25	; 0x04
     d1c:	8b 83       	std	Y+3, r24	; 0x03
     d1e:	6d 83       	std	Y+5, r22	; 0x05
    UARTEnum local_UARTEnumErrorState = UART_RXSTR_OK;
     d20:	86 e0       	ldi	r24, 0x06	; 6
     d22:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Count = 0;
     d24:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8ReceiveString != NULL)
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	00 97       	sbiw	r24, 0x00	; 0
     d2c:	d1 f0       	breq	.+52     	; 0xd62 <UART_UARTEnumReceiveString+0x56>
     d2e:	14 c0       	rjmp	.+40     	; 0xd58 <UART_UARTEnumReceiveString+0x4c>
    {
    	while(local_u8Count < copy_u8StringLenth)
    	{
			/* wait until the receive is completed */
			while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_RXC_BIT) == 0);
     d30:	eb e2       	ldi	r30, 0x2B	; 43
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 23       	and	r24, r24
     d38:	dc f7       	brge	.-10     	; 0xd30 <UART_UARTEnumReceiveString+0x24>
    		/* receive the data */
    		copy_pu8ReceiveString[local_u8Count] = UART_u8_UDR_REG;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	9c 81       	ldd	r25, Y+4	; 0x04
     d44:	dc 01       	movw	r26, r24
     d46:	a2 0f       	add	r26, r18
     d48:	b3 1f       	adc	r27, r19
     d4a:	ec e2       	ldi	r30, 0x2C	; 44
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8c 93       	st	X, r24
    		local_u8Count++;
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	89 83       	std	Y+1, r24	; 0x01
{
    UARTEnum local_UARTEnumErrorState = UART_RXSTR_OK;
    u8 local_u8Count = 0;
    if(copy_pu8ReceiveString != NULL)
    {
    	while(local_u8Count < copy_u8StringLenth)
     d58:	99 81       	ldd	r25, Y+1	; 0x01
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	98 17       	cp	r25, r24
     d5e:	40 f3       	brcs	.-48     	; 0xd30 <UART_UARTEnumReceiveString+0x24>
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <UART_UARTEnumReceiveString+0x5a>
    		local_u8Count++;
    	}
    }
    else
    {
        local_UARTEnumErrorState = UART_RXSTR_NOK;
     d62:	87 e0       	ldi	r24, 0x07	; 7
     d64:	8a 83       	std	Y+2, r24	; 0x02
    }
    return local_UARTEnumErrorState;
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <Timer_Normalvoidinit>:
#include "../Include/TIMER.h"

//static void (*TIMER0_OC_Fptr) (void)=NULL;
static void (*TIMER0_OV_Fptr) (void)=NULL;

void Timer_Normalvoidinit(void){
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0b00000101;
     d80:	e3 e5       	ldi	r30, 0x53	; 83
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	85 e0       	ldi	r24, 0x05	; 5
     d86:	80 83       	st	Z, r24
	TIMSK=0b00000011;
     d88:	e9 e5       	ldi	r30, 0x59	; 89
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	80 83       	st	Z, r24
}
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <Timer_FASTPWMvoidinit>:
void Timer_FASTPWMvoidinit(void){
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0b01111010;
     d9e:	e3 e5       	ldi	r30, 0x53	; 83
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	8a e7       	ldi	r24, 0x7A	; 122
     da4:	80 83       	st	Z, r24
	TIMSK=0b00000011;
     da6:	e9 e5       	ldi	r30, 0x59	; 89
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	80 83       	st	Z, r24
}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <Timer_PhaseCorrectPWMvoidinit>:
void Timer_PhaseCorrectPWMvoidinit(void){
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0b01110010;
     dbc:	e3 e5       	ldi	r30, 0x53	; 83
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	82 e7       	ldi	r24, 0x72	; 114
     dc2:	80 83       	st	Z, r24
	TIMSK=0b00000011;
     dc4:	e9 e5       	ldi	r30, 0x59	; 89
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	80 83       	st	Z, r24
}
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <Timer_voidsetPWM>:

void Timer_voidsetPWM(u8 copy_cmpvalue){
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	0f 92       	push	r0
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	89 83       	std	Y+1, r24	; 0x01
	OCR0=copy_cmpvalue;
     dde:	ec e5       	ldi	r30, 0x5C	; 92
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	80 83       	st	Z, r24
}
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <Timer_getTimer1countervalue>:
void Timer_getTimer1countervalue(u16 *copy_countervalue){
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <Timer_getTimer1countervalue+0x6>
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	*copy_countervalue=TCNT0;
     dfc:	e2 e5       	ldi	r30, 0x52	; 82
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	e9 81       	ldd	r30, Y+1	; 0x01
     e08:	fa 81       	ldd	r31, Y+2	; 0x02
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <Timer_getPWMonperiod>:
u8 Timer_getPWMonperiod(void){
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
	return OCR0;
     e20:	ec e5       	ldi	r30, 0x5C	; 92
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
}
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <Timer_getPWMdutycycle>:
u8 Timer_getPWMdutycycle(){
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <Timer_getPWMdutycycle+0x6>
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	
		u16 timeon=OCR0*100;
     e38:	ec e5       	ldi	r30, 0x5C	; 92
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	84 e6       	ldi	r24, 0x64	; 100
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	ac 01       	movw	r20, r24
     e48:	24 9f       	mul	r18, r20
     e4a:	c0 01       	movw	r24, r0
     e4c:	25 9f       	mul	r18, r21
     e4e:	90 0d       	add	r25, r0
     e50:	34 9f       	mul	r19, r20
     e52:	90 0d       	add	r25, r0
     e54:	11 24       	eor	r1, r1
     e56:	9b 83       	std	Y+3, r25	; 0x03
     e58:	8a 83       	std	Y+2, r24	; 0x02
		
	u8 duty=(u16)timeon/255;
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	9b 81       	ldd	r25, Y+3	; 0x03
     e5e:	2f ef       	ldi	r18, 0xFF	; 255
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	b9 01       	movw	r22, r18
     e64:	0e 94 a5 1a 	call	0x354a	; 0x354a <__udivmodhi4>
     e68:	cb 01       	movw	r24, r22
     e6a:	89 83       	std	Y+1, r24	; 0x01
	duty=100-duty;
     e6c:	94 e6       	ldi	r25, 0x64	; 100
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	59 2f       	mov	r21, r25
     e72:	58 1b       	sub	r21, r24
     e74:	85 2f       	mov	r24, r21
     e76:	89 83       	std	Y+1, r24	; 0x01
	return duty;
     e78:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <__vector_11>:




ISR(TIMER0_OV_vect)
{
     e86:	1f 92       	push	r1
     e88:	0f 92       	push	r0
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	0f 92       	push	r0
     e8e:	11 24       	eor	r1, r1
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	if (*TIMER0_OV_Fptr!=NULL)
     eb0:	80 91 9c 00 	lds	r24, 0x009C
     eb4:	90 91 9d 00 	lds	r25, 0x009D
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	29 f0       	breq	.+10     	; 0xec6 <__vector_11+0x40>
	{
		TIMER0_OV_Fptr();
     ebc:	e0 91 9c 00 	lds	r30, 0x009C
     ec0:	f0 91 9d 00 	lds	r31, 0x009D
     ec4:	09 95       	icall
	}
	
 }
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	ff 91       	pop	r31
     ecc:	ef 91       	pop	r30
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	7f 91       	pop	r23
     ed8:	6f 91       	pop	r22
     eda:	5f 91       	pop	r21
     edc:	4f 91       	pop	r20
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <SPI_voidMasterInit>:
#include "../Include/SPI_interface.h"
#include "../Include/SPI_private.h"
#include "../Include/SPI_config.h"

void SPI_voidMasterInit(void)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
    /* select the clk prescaler */
    #if   SPI_u8_CLK_PRESCALING == SPI_CLK_PRESC_4
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR0_BIT);
     ef4:	ad e2       	ldi	r26, 0x2D	; 45
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ed e2       	ldi	r30, 0x2D	; 45
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8e 7f       	andi	r24, 0xFE	; 254
     f00:	8c 93       	st	X, r24
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR1_BIT);
     f02:	ad e2       	ldi	r26, 0x2D	; 45
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ed e2       	ldi	r30, 0x2D	; 45
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	8d 7f       	andi	r24, 0xFD	; 253
     f0e:	8c 93       	st	X, r24
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR0_BIT);
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR1_BIT);
    #endif
    /* select the clock phase */
    #if   SPI_u8_CLOCK_PHASE == SPI_SAMPLE_SETUP
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_CPHA_BIT);
     f10:	ad e2       	ldi	r26, 0x2D	; 45
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ed e2       	ldi	r30, 0x2D	; 45
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8b 7f       	andi	r24, 0xFB	; 251
     f1c:	8c 93       	st	X, r24
    #elif SPI_u8_CLOCK_PHASE == SPI_SETUP_SAMPLE
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_CPHA_BIT);
    #endif
    /* select the clock polarity */
    #if   SPI_u8_CLOCK_POLARITY == SPI_RISING_FALLING
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_CPOL_BIT);
     f1e:	ad e2       	ldi	r26, 0x2D	; 45
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ed e2       	ldi	r30, 0x2D	; 45
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	87 7f       	andi	r24, 0xF7	; 247
     f2a:	8c 93       	st	X, r24
    #elif SPI_u8_CLOCK_POLARITY == SPI_FALLING_RISING
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_CPOL_BIT);
    #endif
    /* select the shifting register */
    #if   SPI_u8_SHIFTING_MODE == SPI_SHIFTING_LSB
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_DORD_BIT);
     f2c:	ad e2       	ldi	r26, 0x2D	; 45
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ed e2       	ldi	r30, 0x2D	; 45
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	80 62       	ori	r24, 0x20	; 32
     f38:	8c 93       	st	X, r24
    #elif SPI_u8_SHIFTING_MODE == SPI_SHIFTING_MSB
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_DORD_BIT);
    #endif
    /* initial as master */
    SET_BIT(SPI_u8_SPCR_REG,SPI_u8_MSTR_BIT);
     f3a:	ad e2       	ldi	r26, 0x2D	; 45
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ed e2       	ldi	r30, 0x2D	; 45
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 61       	ori	r24, 0x10	; 16
     f46:	8c 93       	st	X, r24
    /* enable SPI */
    SET_BIT(SPI_u8_SPCR_REG,SPI_u8_SPE_BIT);
     f48:	ad e2       	ldi	r26, 0x2D	; 45
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ed e2       	ldi	r30, 0x2D	; 45
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	80 64       	ori	r24, 0x40	; 64
     f54:	8c 93       	st	X, r24
}
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <SPI_voidSlaveInit>:

void SPI_voidSlaveInit(void)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
    /* select the clock phase */
    #if   SPI_u8_CLOCK_PHASE == SPI_SAMPLE_SETUP
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_CPHA_BIT);
     f64:	ad e2       	ldi	r26, 0x2D	; 45
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	ed e2       	ldi	r30, 0x2D	; 45
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8b 7f       	andi	r24, 0xFB	; 251
     f70:	8c 93       	st	X, r24
    #elif SPI_u8_CLOCK_PHASE == SPI_SETUP_SAMPLE
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_CPHA_BIT);
    #endif
    /* select the clock polarity */
    #if   SPI_u8_CLOCK_POLARITY == SPI_RISING_FALLING
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_CPOL_BIT);
     f72:	ad e2       	ldi	r26, 0x2D	; 45
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ed e2       	ldi	r30, 0x2D	; 45
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	87 7f       	andi	r24, 0xF7	; 247
     f7e:	8c 93       	st	X, r24
    #elif SPI_u8_CLOCK_POLARITY == SPI_FALLING_RISING
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_CPOL_BIT);
    #endif
    /* select the shifting register */
    #if   SPI_u8_SHIFTING_MODE == SPI_SHIFTING_LSB
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_DORD_BIT);
     f80:	ad e2       	ldi	r26, 0x2D	; 45
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ed e2       	ldi	r30, 0x2D	; 45
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 62       	ori	r24, 0x20	; 32
     f8c:	8c 93       	st	X, r24
    #elif SPI_u8_SHIFTING_MODE == SPI_SHIFTING_MSB
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_DORD_BIT);
    #endif
    /* initial as slave */
    CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_MSTR_BIT);
     f8e:	ad e2       	ldi	r26, 0x2D	; 45
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ed e2       	ldi	r30, 0x2D	; 45
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8f 7e       	andi	r24, 0xEF	; 239
     f9a:	8c 93       	st	X, r24
    /* enable SPI */
    SET_BIT(SPI_u8_SPCR_REG,SPI_u8_SPE_BIT);
     f9c:	ad e2       	ldi	r26, 0x2D	; 45
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ed e2       	ldi	r30, 0x2D	; 45
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	80 64       	ori	r24, 0x40	; 64
     fa8:	8c 93       	st	X, r24
}
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <SPI_SPIEnumSendReceiveData>:
SPIEnum SPI_SPIEnumSendReceiveData(u8 copy_u8SendData,pu8 copy_pu8ReceiveData)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <SPI_SPIEnumSendReceiveData+0x6>
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <SPI_SPIEnumSendReceiveData+0x8>
     fb8:	00 d0       	rcall	.+0      	; 0xfba <SPI_SPIEnumSendReceiveData+0xa>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	8c 83       	std	Y+4, r24	; 0x04
     fc0:	7e 83       	std	Y+6, r23	; 0x06
     fc2:	6d 83       	std	Y+5, r22	; 0x05
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_BYTE_OK;
     fc4:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16TimeCount = 0;
     fc6:	1a 82       	std	Y+2, r1	; 0x02
     fc8:	19 82       	std	Y+1, r1	; 0x01
    if((copy_u8SendData <= 255) && (copy_pu8ReceiveData != NULL))
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	e1 f0       	breq	.+56     	; 0x100a <SPI_SPIEnumSendReceiveData+0x5a>
    {
        /* send the Data */
        SPI_u8_SPDR_REG = copy_u8SendData;
     fd2:	ef e2       	ldi	r30, 0x2F	; 47
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	80 83       	st	Z, r24
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <SPI_SPIEnumSendReceiveData+0x36>
        /*  wait until transmition is completed => non blocking mechanism*/
        while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCount < SPI_TIME_OUT))
        {
            local_u16TimeCount++;
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	89 83       	std	Y+1, r24	; 0x01
    if((copy_u8SendData <= 255) && (copy_pu8ReceiveData != NULL))
    {
        /* send the Data */
        SPI_u8_SPDR_REG = copy_u8SendData;
        /*  wait until transmition is completed => non blocking mechanism*/
        while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCount < SPI_TIME_OUT))
     fe6:	ee e2       	ldi	r30, 0x2E	; 46
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	88 23       	and	r24, r24
     fee:	34 f0       	brlt	.+12     	; 0xffc <SPI_SPIEnumSendReceiveData+0x4c>
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	23 ec       	ldi	r18, 0xC3	; 195
     ff6:	80 35       	cpi	r24, 0x50	; 80
     ff8:	92 07       	cpc	r25, r18
     ffa:	80 f3       	brcs	.-32     	; 0xfdc <SPI_SPIEnumSendReceiveData+0x2c>
        {
            local_u16TimeCount++;
        }
        /* receive the data */
        *copy_pu8ReceiveData = SPI_u8_SPDR_REG;
     ffc:	ef e2       	ldi	r30, 0x2F	; 47
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	ed 81       	ldd	r30, Y+5	; 0x05
    1004:	fe 81       	ldd	r31, Y+6	; 0x06
    1006:	80 83       	st	Z, r24
    1008:	02 c0       	rjmp	.+4      	; 0x100e <SPI_SPIEnumSendReceiveData+0x5e>
    }
    else
    {
        local_u8SPIEnumErrorState = SPI_SR_BYTE_NOK;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	8b 83       	std	Y+3, r24	; 0x03
    }
    return local_u8SPIEnumErrorState;
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1010:	26 96       	adiw	r28, 0x06	; 6
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <SPI_SPIEnumSendData>:

SPIEnum SPI_SPIEnumSendData(u8 copy_u8SendData)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <SPI_SPIEnumSendData+0x6>
    1028:	00 d0       	rcall	.+0      	; 0x102a <SPI_SPIEnumSendData+0x8>
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	8c 83       	std	Y+4, r24	; 0x04
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_BYTE_OK;
    1030:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16TimeCount = 0;
    1032:	1a 82       	std	Y+2, r1	; 0x02
    1034:	19 82       	std	Y+1, r1	; 0x01
    if(copy_u8SendData <= 255)
    {
        /* send the Data */
        SPI_u8_SPDR_REG = copy_u8SendData;
    1036:	ef e2       	ldi	r30, 0x2F	; 47
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	80 83       	st	Z, r24
    103e:	05 c0       	rjmp	.+10     	; 0x104a <SPI_SPIEnumSendData+0x28>
        /*  wait until transmition is completed => non blocking mechanism*/
        while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCount < SPI_TIME_OUT))
        {
            local_u16TimeCount++;
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	9a 81       	ldd	r25, Y+2	; 0x02
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	89 83       	std	Y+1, r24	; 0x01
    if(copy_u8SendData <= 255)
    {
        /* send the Data */
        SPI_u8_SPDR_REG = copy_u8SendData;
        /*  wait until transmition is completed => non blocking mechanism*/
        while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCount < SPI_TIME_OUT))
    104a:	ee e2       	ldi	r30, 0x2E	; 46
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	88 23       	and	r24, r24
    1052:	34 f0       	brlt	.+12     	; 0x1060 <SPI_SPIEnumSendData+0x3e>
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	23 ec       	ldi	r18, 0xC3	; 195
    105a:	80 35       	cpi	r24, 0x50	; 80
    105c:	92 07       	cpc	r25, r18
    105e:	80 f3       	brcs	.-32     	; 0x1040 <SPI_SPIEnumSendData+0x1e>
    }
    else
    {
        local_u8SPIEnumErrorState = SPI_SR_BYTE_NOK;
    }
    return local_u8SPIEnumErrorState;
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <SPI_SPIEnumReceiveData>:

SPIEnum SPI_SPIEnumReceiveData(pu8 copy_pu8ReceiveData)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <SPI_SPIEnumReceiveData+0x6>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <SPI_SPIEnumReceiveData+0x8>
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	9d 83       	std	Y+5, r25	; 0x05
    1080:	8c 83       	std	Y+4, r24	; 0x04
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_BYTE_OK;
    1082:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16TimeCount = 0;
    1084:	1a 82       	std	Y+2, r1	; 0x02
    1086:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8ReceiveData != NULL)
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	c1 f0       	breq	.+48     	; 0x10c0 <SPI_SPIEnumReceiveData+0x50>
    1090:	05 c0       	rjmp	.+10     	; 0x109c <SPI_SPIEnumReceiveData+0x2c>
    {
        /*  wait until transmition is completed => non blocking mechanism*/
        while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCount < SPI_TIME_OUT))
        {
            local_u16TimeCount++;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	89 83       	std	Y+1, r24	; 0x01
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_BYTE_OK;
    u16 local_u16TimeCount = 0;
    if(copy_pu8ReceiveData != NULL)
    {
        /*  wait until transmition is completed => non blocking mechanism*/
        while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCount < SPI_TIME_OUT))
    109c:	ee e2       	ldi	r30, 0x2E	; 46
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	88 23       	and	r24, r24
    10a4:	34 f0       	brlt	.+12     	; 0x10b2 <SPI_SPIEnumReceiveData+0x42>
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	23 ec       	ldi	r18, 0xC3	; 195
    10ac:	80 35       	cpi	r24, 0x50	; 80
    10ae:	92 07       	cpc	r25, r18
    10b0:	80 f3       	brcs	.-32     	; 0x1092 <SPI_SPIEnumReceiveData+0x22>
        {
            local_u16TimeCount++;
        }
        /* receive the data */
        *copy_pu8ReceiveData = SPI_u8_SPDR_REG;
    10b2:	ef e2       	ldi	r30, 0x2F	; 47
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	ec 81       	ldd	r30, Y+4	; 0x04
    10ba:	fd 81       	ldd	r31, Y+5	; 0x05
    10bc:	80 83       	st	Z, r24
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <SPI_SPIEnumReceiveData+0x54>
    }
    else
    {
        local_u8SPIEnumErrorState = SPI_SR_BYTE_NOK;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	8b 83       	std	Y+3, r24	; 0x03
    }
    return local_u8SPIEnumErrorState;
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <SPI_SPIEnumSendReceiveString>:

SPIEnum SPI_SPIEnumSendReceiveString(pu8 copy_pu8SendString,pu8 copy_pu8ReceiveString)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	28 97       	sbiw	r28, 0x08	; 8
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	78 87       	std	Y+8, r23	; 0x08
    10f0:	6f 83       	std	Y+7, r22	; 0x07
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_STRING_OK;
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	8c 83       	std	Y+4, r24	; 0x04
    u8 local_u8SendCounter = 0;
    10f6:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16TimeCounter = 0;
    10f8:	1a 82       	std	Y+2, r1	; 0x02
    10fa:	19 82       	std	Y+1, r1	; 0x01
    if((copy_pu8SendString != NULL) && (copy_pu8ReceiveString != NULL))
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	09 f4       	brne	.+2      	; 0x1106 <SPI_SPIEnumSendReceiveString+0x30>
    1104:	3d c0       	rjmp	.+122    	; 0x1180 <SPI_SPIEnumSendReceiveString+0xaa>
    1106:	8f 81       	ldd	r24, Y+7	; 0x07
    1108:	98 85       	ldd	r25, Y+8	; 0x08
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	c9 f1       	breq	.+114    	; 0x1180 <SPI_SPIEnumSendReceiveString+0xaa>
    110e:	2c c0       	rjmp	.+88     	; 0x1168 <SPI_SPIEnumSendReceiveString+0x92>
    {
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
        {
            SPI_u8_SPDR_REG = copy_pu8SendString[local_u8SendCounter];
    1110:	af e2       	ldi	r26, 0x2F	; 47
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	fc 01       	movw	r30, r24
    1120:	e2 0f       	add	r30, r18
    1122:	f3 1f       	adc	r31, r19
    1124:	80 81       	ld	r24, Z
    1126:	8c 93       	st	X, r24
    1128:	05 c0       	rjmp	.+10     	; 0x1134 <SPI_SPIEnumSendReceiveString+0x5e>
            /*  wait until transmition is completed => non blocking mechanism*/
            while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
            {
                local_u16TimeCounter++;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
        {
            SPI_u8_SPDR_REG = copy_pu8SendString[local_u8SendCounter];
            /*  wait until transmition is completed => non blocking mechanism*/
            while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
    1134:	ee e2       	ldi	r30, 0x2E	; 46
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	88 23       	and	r24, r24
    113c:	34 f0       	brlt	.+12     	; 0x114a <SPI_SPIEnumSendReceiveString+0x74>
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	23 ec       	ldi	r18, 0xC3	; 195
    1144:	80 35       	cpi	r24, 0x50	; 80
    1146:	92 07       	cpc	r25, r18
    1148:	80 f3       	brcs	.-32     	; 0x112a <SPI_SPIEnumSendReceiveString+0x54>
            {
                local_u16TimeCounter++;
            }
            copy_pu8ReceiveString[local_u8SendCounter] = SPI_u8_SPDR_REG;
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	8f 81       	ldd	r24, Y+7	; 0x07
    1152:	98 85       	ldd	r25, Y+8	; 0x08
    1154:	dc 01       	movw	r26, r24
    1156:	a2 0f       	add	r26, r18
    1158:	b3 1f       	adc	r27, r19
    115a:	ef e2       	ldi	r30, 0x2F	; 47
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8c 93       	st	X, r24
            local_u8SendCounter++;
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	8b 83       	std	Y+3, r24	; 0x03
    u8 local_u8SendCounter = 0;
    u16 local_u16TimeCounter = 0;
    if((copy_pu8SendString != NULL) && (copy_pu8ReceiveString != NULL))
    {
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	fc 01       	movw	r30, r24
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	80 81       	ld	r24, Z
    117a:	88 23       	and	r24, r24
    117c:	49 f6       	brne	.-110    	; 0x1110 <SPI_SPIEnumSendReceiveString+0x3a>
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <SPI_SPIEnumSendReceiveString+0xae>
            local_u8SendCounter++;
        }
    }
    else
    {
        local_u8SPIEnumErrorState = SPI_SR_STRING_NOK;
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	8c 83       	std	Y+4, r24	; 0x04
    }
    return local_u8SPIEnumErrorState;
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1186:	28 96       	adiw	r28, 0x08	; 8
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <SPI_SPIEnumSendString>:

SPIEnum SPI_SPIEnumSendString(pu8 copy_pu8SendString)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <SPI_SPIEnumSendString+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <SPI_SPIEnumSendString+0x8>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <SPI_SPIEnumSendString+0xa>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	9e 83       	std	Y+6, r25	; 0x06
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_STRING_OK;
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	8c 83       	std	Y+4, r24	; 0x04
    u8 local_u8SendCounter = 0;
    11ae:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16TimeCounter = 0;
    11b0:	1a 82       	std	Y+2, r1	; 0x02
    11b2:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8SendString != NULL)
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	69 f1       	breq	.+90     	; 0x1216 <SPI_SPIEnumSendString+0x7e>
    11bc:	20 c0       	rjmp	.+64     	; 0x11fe <SPI_SPIEnumSendString+0x66>
    {
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
        {
            SPI_u8_SPDR_REG = copy_pu8SendString[local_u8SendCounter];
    11be:	af e2       	ldi	r26, 0x2F	; 47
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ca:	9e 81       	ldd	r25, Y+6	; 0x06
    11cc:	fc 01       	movw	r30, r24
    11ce:	e2 0f       	add	r30, r18
    11d0:	f3 1f       	adc	r31, r19
    11d2:	80 81       	ld	r24, Z
    11d4:	8c 93       	st	X, r24
    11d6:	05 c0       	rjmp	.+10     	; 0x11e2 <SPI_SPIEnumSendString+0x4a>
            /*  wait until transmition is completed => non blocking mechanism*/
            while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
            {
                local_u16TimeCounter++;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	89 83       	std	Y+1, r24	; 0x01
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
        {
            SPI_u8_SPDR_REG = copy_pu8SendString[local_u8SendCounter];
            /*  wait until transmition is completed => non blocking mechanism*/
            while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
    11e2:	ee e2       	ldi	r30, 0x2E	; 46
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	88 23       	and	r24, r24
    11ea:	34 f0       	brlt	.+12     	; 0x11f8 <SPI_SPIEnumSendString+0x60>
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	23 ec       	ldi	r18, 0xC3	; 195
    11f2:	80 35       	cpi	r24, 0x50	; 80
    11f4:	92 07       	cpc	r25, r18
    11f6:	80 f3       	brcs	.-32     	; 0x11d8 <SPI_SPIEnumSendString+0x40>
            {
                local_u16TimeCounter++;
            }
            local_u8SendCounter++;
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	8b 83       	std	Y+3, r24	; 0x03
    u8 local_u8SendCounter = 0;
    u16 local_u16TimeCounter = 0;
    if(copy_pu8SendString != NULL)
    {
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	fc 01       	movw	r30, r24
    120a:	e2 0f       	add	r30, r18
    120c:	f3 1f       	adc	r31, r19
    120e:	80 81       	ld	r24, Z
    1210:	88 23       	and	r24, r24
    1212:	a9 f6       	brne	.-86     	; 0x11be <SPI_SPIEnumSendString+0x26>
    1214:	02 c0       	rjmp	.+4      	; 0x121a <SPI_SPIEnumSendString+0x82>
            local_u8SendCounter++;
        }
    }
    else
    {
        local_u8SPIEnumErrorState = SPI_SR_STRING_NOK;
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	8c 83       	std	Y+4, r24	; 0x04
    }
    return local_u8SPIEnumErrorState;
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    121c:	26 96       	adiw	r28, 0x06	; 6
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <SPI_SPIEnumReceiveString>:
SPIEnum SPI_SPIEnumReceiveString(pu8 copy_pu8ReceiveString,u8 copy_u8StringLen)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	27 97       	sbiw	r28, 0x07	; 7
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	9e 83       	std	Y+6, r25	; 0x06
    1244:	8d 83       	std	Y+5, r24	; 0x05
    1246:	6f 83       	std	Y+7, r22	; 0x07
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_STRING_OK;
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	8c 83       	std	Y+4, r24	; 0x04
    u8 local_u8ReceiveCounter = 0;
    124c:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16TimeCounter = 0;
    124e:	1a 82       	std	Y+2, r1	; 0x02
    1250:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8ReceiveString != NULL)
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	29 f1       	breq	.+74     	; 0x12a4 <SPI_SPIEnumReceiveString+0x76>
    125a:	1f c0       	rjmp	.+62     	; 0x129a <SPI_SPIEnumReceiveString+0x6c>
   	while(local_u8ReceiveCounter < copy_u8StringLen)
    {
    	/*  wait until transmition is completed => non blocking mechanism*/
    	while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
    	{
    		local_u16TimeCounter++;
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
    if(copy_pu8ReceiveString != NULL)
    {
   	while(local_u8ReceiveCounter < copy_u8StringLen)
    {
    	/*  wait until transmition is completed => non blocking mechanism*/
    	while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
    1266:	ee e2       	ldi	r30, 0x2E	; 46
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	88 23       	and	r24, r24
    126e:	34 f0       	brlt	.+12     	; 0x127c <SPI_SPIEnumReceiveString+0x4e>
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	23 ec       	ldi	r18, 0xC3	; 195
    1276:	80 35       	cpi	r24, 0x50	; 80
    1278:	92 07       	cpc	r25, r18
    127a:	80 f3       	brcs	.-32     	; 0x125c <SPI_SPIEnumReceiveString+0x2e>
    	{
    		local_u16TimeCounter++;
    	}
    	copy_pu8ReceiveString[local_u8ReceiveCounter] = SPI_u8_SPDR_REG;
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	dc 01       	movw	r26, r24
    1288:	a2 0f       	add	r26, r18
    128a:	b3 1f       	adc	r27, r19
    128c:	ef e2       	ldi	r30, 0x2F	; 47
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8c 93       	st	X, r24
    	local_u8ReceiveCounter++;
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	8b 83       	std	Y+3, r24	; 0x03
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_STRING_OK;
    u8 local_u8ReceiveCounter = 0;
    u16 local_u16TimeCounter = 0;
    if(copy_pu8ReceiveString != NULL)
    {
   	while(local_u8ReceiveCounter < copy_u8StringLen)
    129a:	9b 81       	ldd	r25, Y+3	; 0x03
    129c:	8f 81       	ldd	r24, Y+7	; 0x07
    129e:	98 17       	cp	r25, r24
    12a0:	10 f3       	brcs	.-60     	; 0x1266 <SPI_SPIEnumReceiveString+0x38>
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <SPI_SPIEnumReceiveString+0x7a>
    	local_u8ReceiveCounter++;
    }
    }
    else
    {
        local_u8SPIEnumErrorState = SPI_SR_STRING_NOK;
    12a4:	83 e0       	ldi	r24, 0x03	; 3
    12a6:	8c 83       	std	Y+4, r24	; 0x04
    }
    return local_u8SPIEnumErrorState;
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    12aa:	27 96       	adiw	r28, 0x07	; 7
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <PORT_voidInit>:
#include "../Include/PORT_private.h"
#include "../Include/PORT_config.h"


void PORT_voidInit(void)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	/* Initialization Direction for all Pins */
	// PORTA
	PORT_u8_DDRA_REG = CONC(PORT_u8_PA7_DIRECTION,PORT_u8_PA6_DIRECTION,PORT_u8_PA5_DIRECTION,PORT_u8_PA4_DIRECTION,
    12c4:	ea e3       	ldi	r30, 0x3A	; 58
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	8e ed       	ldi	r24, 0xDE	; 222
    12ca:	80 83       	st	Z, r24
	                        PORT_u8_PA3_DIRECTION,PORT_u8_PA2_DIRECTION,PORT_u8_PA1_DIRECTION,PORT_u8_PA0_DIRECTION);
	// PORTB
	PORT_u8_DDRB_REG = CONC(PORT_u8_PB7_DIRECTION,PORT_u8_PB6_DIRECTION,PORT_u8_PB5_DIRECTION,PORT_u8_PB4_DIRECTION,
    12cc:	e7 e3       	ldi	r30, 0x37	; 55
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	8f eb       	ldi	r24, 0xBF	; 191
    12d2:	80 83       	st	Z, r24
	                        PORT_u8_PB3_DIRECTION,PORT_u8_PB2_DIRECTION,PORT_u8_PB1_DIRECTION,PORT_u8_PB0_DIRECTION);
	// PORTC
	PORT_u8_DDRC_REG = CONC(PORT_u8_PC7_DIRECTION,PORT_u8_PC6_DIRECTION,PORT_u8_PC5_DIRECTION,PORT_u8_PC4_DIRECTION,
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
    12da:	80 83       	st	Z, r24
							PORT_u8_PC3_DIRECTION,PORT_u8_PC2_DIRECTION,PORT_u8_PC1_DIRECTION,PORT_u8_PC0_DIRECTION);
	// PORTD
	PORT_u8_DDRD_REG = CONC(PORT_u8_PD7_DIRECTION,PORT_u8_PD6_DIRECTION,PORT_u8_PD5_DIRECTION,PORT_u8_PD4_DIRECTION,
    12dc:	e1 e3       	ldi	r30, 0x31	; 49
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a ef       	ldi	r24, 0xFA	; 250
    12e2:	80 83       	st	Z, r24
							PORT_u8_PD3_DIRECTION,PORT_u8_PD2_DIRECTION,PORT_u8_PD1_DIRECTION,PORT_u8_PD0_DIRECTION);
					
	/* Initialization Value for all Pins  */
	// PORTA
	PORT_u8_PORTA_REG = CONC(PORT_u8_PA7_VALUE,PORT_u8_PA6_VALUE,PORT_u8_PA5_VALUE,PORT_u8_PA4_VALUE,
    12e4:	eb e3       	ldi	r30, 0x3B	; 59
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 e2       	ldi	r24, 0x20	; 32
    12ea:	80 83       	st	Z, r24
							 PORT_u8_PA3_VALUE,PORT_u8_PA2_VALUE,PORT_u8_PA1_VALUE,PORT_u8_PA0_VALUE);
	// PORTB
	PORT_u8_PORTB_REG = CONC(PORT_u8_PB7_VALUE,PORT_u8_PB6_VALUE,PORT_u8_PB5_VALUE,PORT_u8_PB4_VALUE,
    12ec:	e8 e3       	ldi	r30, 0x38	; 56
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 e5       	ldi	r24, 0x50	; 80
    12f2:	80 83       	st	Z, r24
							 PORT_u8_PB3_VALUE,PORT_u8_PB2_VALUE,PORT_u8_PB1_VALUE,PORT_u8_PB0_VALUE);
	// PORTC
	PORT_u8_PORTC_REG = CONC(PORT_u8_PC7_VALUE,PORT_u8_PC6_VALUE,PORT_u8_PC5_VALUE,PORT_u8_PC4_VALUE,
    12f4:	e5 e3       	ldi	r30, 0x35	; 53
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	10 82       	st	Z, r1
							 PORT_u8_PC3_VALUE,PORT_u8_PC2_VALUE,PORT_u8_PC1_VALUE,PORT_u8_PC0_VALUE);
	// PORTD
	PORT_u8_PORTD_REG = CONC(PORT_u8_PD7_VALUE,PORT_u8_PD6_VALUE,PORT_u8_PD5_VALUE,PORT_u8_PD4_VALUE,
    12fa:	e2 e3       	ldi	r30, 0x32	; 50
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	80 83       	st	Z, r24
							 PORT_u8_PD3_VALUE,PORT_u8_PD2_VALUE,PORT_u8_PD1_VALUE,PORT_u8_PD0_VALUE);
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <PORT_PortEnumSetPinDirection>:

PortEnum PORT_PortEnumSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Direction)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	2e 97       	sbiw	r28, 0x0e	; 14
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	8a 83       	std	Y+2, r24	; 0x02
    131e:	6b 83       	std	Y+3, r22	; 0x03
    1320:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_DIRECTION_OK;
    1322:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	08 f0       	brcs	.+2      	; 0x132c <PORT_PortEnumSetPinDirection+0x24>
    132a:	05 c1       	rjmp	.+522    	; 0x1536 <PORT_PortEnumSetPinDirection+0x22e>
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 30       	cpi	r24, 0x08	; 8
    1330:	08 f0       	brcs	.+2      	; 0x1334 <PORT_PortEnumSetPinDirection+0x2c>
    1332:	01 c1       	rjmp	.+514    	; 0x1536 <PORT_PortEnumSetPinDirection+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3e 87       	std	Y+14, r19	; 0x0e
    133c:	2d 87       	std	Y+13, r18	; 0x0d
    133e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1340:	9e 85       	ldd	r25, Y+14	; 0x0e
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	91 05       	cpc	r25, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <PORT_PortEnumSetPinDirection+0x42>
    1348:	4f c0       	rjmp	.+158    	; 0x13e8 <PORT_PortEnumSetPinDirection+0xe0>
    134a:	2d 85       	ldd	r18, Y+13	; 0x0d
    134c:	3e 85       	ldd	r19, Y+14	; 0x0e
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	2c f4       	brge	.+10     	; 0x135e <PORT_PortEnumSetPinDirection+0x56>
    1354:	8d 85       	ldd	r24, Y+13	; 0x0d
    1356:	9e 85       	ldd	r25, Y+14	; 0x0e
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	71 f0       	breq	.+28     	; 0x1378 <PORT_PortEnumSetPinDirection+0x70>
    135c:	ee c0       	rjmp	.+476    	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
    135e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1360:	3e 85       	ldd	r19, Y+14	; 0x0e
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <PORT_PortEnumSetPinDirection+0x62>
    1368:	77 c0       	rjmp	.+238    	; 0x1458 <PORT_PortEnumSetPinDirection+0x150>
    136a:	8d 85       	ldd	r24, Y+13	; 0x0d
    136c:	9e 85       	ldd	r25, Y+14	; 0x0e
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	91 05       	cpc	r25, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <PORT_PortEnumSetPinDirection+0x6e>
    1374:	a9 c0       	rjmp	.+338    	; 0x14c8 <PORT_PortEnumSetPinDirection+0x1c0>
    1376:	e1 c0       	rjmp	.+450    	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
		{
			case PORT_u8_PORTA:   // PORTA
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3c 87       	std	Y+12, r19	; 0x0c
    1380:	2b 87       	std	Y+11, r18	; 0x0b
    1382:	8b 85       	ldd	r24, Y+11	; 0x0b
    1384:	9c 85       	ldd	r25, Y+12	; 0x0c
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	d1 f0       	breq	.+52     	; 0x13be <PORT_PortEnumSetPinDirection+0xb6>
    138a:	2b 85       	ldd	r18, Y+11	; 0x0b
    138c:	3c 85       	ldd	r19, Y+12	; 0x0c
    138e:	21 30       	cpi	r18, 0x01	; 1
    1390:	31 05       	cpc	r19, r1
    1392:	09 f0       	breq	.+2      	; 0x1396 <PORT_PortEnumSetPinDirection+0x8e>
    1394:	d2 c0       	rjmp	.+420    	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
    1396:	aa e3       	ldi	r26, 0x3A	; 58
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ea e3       	ldi	r30, 0x3A	; 58
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <PORT_PortEnumSetPinDirection+0xac>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <PORT_PortEnumSetPinDirection+0xa8>
    13b8:	84 2b       	or	r24, r20
    13ba:	8c 93       	st	X, r24
    13bc:	be c0       	rjmp	.+380    	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
    13be:	aa e3       	ldi	r26, 0x3A	; 58
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ea e3       	ldi	r30, 0x3A	; 58
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <PORT_PortEnumSetPinDirection+0xd4>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <PORT_PortEnumSetPinDirection+0xd0>
    13e0:	80 95       	com	r24
    13e2:	84 23       	and	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	a9 c0       	rjmp	.+338    	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTB:   // PORTB
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3a 87       	std	Y+10, r19	; 0x0a
    13f0:	29 87       	std	Y+9, r18	; 0x09
    13f2:	89 85       	ldd	r24, Y+9	; 0x09
    13f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	d1 f0       	breq	.+52     	; 0x142e <PORT_PortEnumSetPinDirection+0x126>
    13fa:	29 85       	ldd	r18, Y+9	; 0x09
    13fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    13fe:	21 30       	cpi	r18, 0x01	; 1
    1400:	31 05       	cpc	r19, r1
    1402:	09 f0       	breq	.+2      	; 0x1406 <PORT_PortEnumSetPinDirection+0xfe>
    1404:	9a c0       	rjmp	.+308    	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
    1406:	a7 e3       	ldi	r26, 0x37	; 55
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e7 e3       	ldi	r30, 0x37	; 55
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <PORT_PortEnumSetPinDirection+0x11c>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <PORT_PortEnumSetPinDirection+0x118>
    1428:	84 2b       	or	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	86 c0       	rjmp	.+268    	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
    142e:	a7 e3       	ldi	r26, 0x37	; 55
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e7 e3       	ldi	r30, 0x37	; 55
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <PORT_PortEnumSetPinDirection+0x144>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <PORT_PortEnumSetPinDirection+0x140>
    1450:	80 95       	com	r24
    1452:	84 23       	and	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	71 c0       	rjmp	.+226    	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	38 87       	std	Y+8, r19	; 0x08
    1460:	2f 83       	std	Y+7, r18	; 0x07
    1462:	8f 81       	ldd	r24, Y+7	; 0x07
    1464:	98 85       	ldd	r25, Y+8	; 0x08
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	d1 f0       	breq	.+52     	; 0x149e <PORT_PortEnumSetPinDirection+0x196>
    146a:	2f 81       	ldd	r18, Y+7	; 0x07
    146c:	38 85       	ldd	r19, Y+8	; 0x08
    146e:	21 30       	cpi	r18, 0x01	; 1
    1470:	31 05       	cpc	r19, r1
    1472:	09 f0       	breq	.+2      	; 0x1476 <PORT_PortEnumSetPinDirection+0x16e>
    1474:	62 c0       	rjmp	.+196    	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
    1476:	a4 e3       	ldi	r26, 0x34	; 52
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e4 e3       	ldi	r30, 0x34	; 52
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <PORT_PortEnumSetPinDirection+0x18c>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <PORT_PortEnumSetPinDirection+0x188>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	4e c0       	rjmp	.+156    	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
    149e:	a4 e3       	ldi	r26, 0x34	; 52
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e4 e3       	ldi	r30, 0x34	; 52
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <PORT_PortEnumSetPinDirection+0x1b4>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <PORT_PortEnumSetPinDirection+0x1b0>
    14c0:	80 95       	com	r24
    14c2:	84 23       	and	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	39 c0       	rjmp	.+114    	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3e 83       	std	Y+6, r19	; 0x06
    14d0:	2d 83       	std	Y+5, r18	; 0x05
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	c9 f0       	breq	.+50     	; 0x150c <PORT_PortEnumSetPinDirection+0x204>
    14da:	2d 81       	ldd	r18, Y+5	; 0x05
    14dc:	3e 81       	ldd	r19, Y+6	; 0x06
    14de:	21 30       	cpi	r18, 0x01	; 1
    14e0:	31 05       	cpc	r19, r1
    14e2:	59 f5       	brne	.+86     	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
    14e4:	a1 e3       	ldi	r26, 0x31	; 49
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e1 e3       	ldi	r30, 0x31	; 49
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <PORT_PortEnumSetPinDirection+0x1fa>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <PORT_PortEnumSetPinDirection+0x1f6>
    1506:	84 2b       	or	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	17 c0       	rjmp	.+46     	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
    150c:	a1 e3       	ldi	r26, 0x31	; 49
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e1 e3       	ldi	r30, 0x31	; 49
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <PORT_PortEnumSetPinDirection+0x222>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <PORT_PortEnumSetPinDirection+0x21e>
    152e:	80 95       	com	r24
    1530:	84 23       	and	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	02 c0       	rjmp	.+4      	; 0x153a <PORT_PortEnumSetPinDirection+0x232>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_DIRECTION_NOK;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
}
    153c:	2e 96       	adiw	r28, 0x0e	; 14
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <PORT_PortEnumSetPinMode>:


PortEnum PORT_PortEnumSetPinMode(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Mode)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	2e 97       	sbiw	r28, 0x0e	; 14
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	6b 83       	std	Y+3, r22	; 0x03
    1566:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_MODE_OK;
    1568:	82 e0       	ldi	r24, 0x02	; 2
    156a:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	84 30       	cpi	r24, 0x04	; 4
    1570:	08 f0       	brcs	.+2      	; 0x1574 <PORT_PortEnumSetPinMode+0x26>
    1572:	ee c1       	rjmp	.+988    	; 0x1950 <PORT_PortEnumSetPinMode+0x402>
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	88 30       	cpi	r24, 0x08	; 8
    1578:	08 f0       	brcs	.+2      	; 0x157c <PORT_PortEnumSetPinMode+0x2e>
    157a:	ea c1       	rjmp	.+980    	; 0x1950 <PORT_PortEnumSetPinMode+0x402>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	3e 87       	std	Y+14, r19	; 0x0e
    1584:	2d 87       	std	Y+13, r18	; 0x0d
    1586:	8d 85       	ldd	r24, Y+13	; 0x0d
    1588:	9e 85       	ldd	r25, Y+14	; 0x0e
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	91 05       	cpc	r25, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <PORT_PortEnumSetPinMode+0x44>
    1590:	89 c0       	rjmp	.+274    	; 0x16a4 <PORT_PortEnumSetPinMode+0x156>
    1592:	2d 85       	ldd	r18, Y+13	; 0x0d
    1594:	3e 85       	ldd	r19, Y+14	; 0x0e
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	2c f4       	brge	.+10     	; 0x15a6 <PORT_PortEnumSetPinMode+0x58>
    159c:	8d 85       	ldd	r24, Y+13	; 0x0d
    159e:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	71 f0       	breq	.+28     	; 0x15c0 <PORT_PortEnumSetPinMode+0x72>
    15a4:	d7 c1       	rjmp	.+942    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
    15a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    15a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <PORT_PortEnumSetPinMode+0x64>
    15b0:	eb c0       	rjmp	.+470    	; 0x1788 <PORT_PortEnumSetPinMode+0x23a>
    15b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b6:	83 30       	cpi	r24, 0x03	; 3
    15b8:	91 05       	cpc	r25, r1
    15ba:	09 f4       	brne	.+2      	; 0x15be <PORT_PortEnumSetPinMode+0x70>
    15bc:	57 c1       	rjmp	.+686    	; 0x186c <PORT_PortEnumSetPinMode+0x31e>
    15be:	ca c1       	rjmp	.+916    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
		{
			case PORT_u8_PORTA:  // PORTA
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	3c 87       	std	Y+12, r19	; 0x0c
    15c8:	2b 87       	std	Y+11, r18	; 0x0b
    15ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    15cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	b1 f0       	breq	.+44     	; 0x1600 <PORT_PortEnumSetPinMode+0xb2>
    15d4:	2b 85       	ldd	r18, Y+11	; 0x0b
    15d6:	3c 85       	ldd	r19, Y+12	; 0x0c
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <PORT_PortEnumSetPinMode+0x9a>
    15de:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	09 f1       	breq	.+66     	; 0x1628 <PORT_PortEnumSetPinMode+0xda>
    15e6:	b6 c1       	rjmp	.+876    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
    15e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    15ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    15ec:	22 30       	cpi	r18, 0x02	; 2
    15ee:	31 05       	cpc	r19, r1
    15f0:	81 f1       	breq	.+96     	; 0x1652 <PORT_PortEnumSetPinMode+0x104>
    15f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	91 05       	cpc	r25, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <PORT_PortEnumSetPinMode+0xb0>
    15fc:	3e c0       	rjmp	.+124    	; 0x167a <PORT_PortEnumSetPinMode+0x12c>
    15fe:	aa c1       	rjmp	.+852    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    1600:	ab e3       	ldi	r26, 0x3B	; 59
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	eb e3       	ldi	r30, 0x3B	; 59
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <PORT_PortEnumSetPinMode+0xd0>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <PORT_PortEnumSetPinMode+0xcc>
    1622:	84 2b       	or	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	96 c1       	rjmp	.+812    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    1628:	ab e3       	ldi	r26, 0x3B	; 59
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	eb e3       	ldi	r30, 0x3B	; 59
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <PORT_PortEnumSetPinMode+0xf8>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <PORT_PortEnumSetPinMode+0xf4>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	81 c1       	rjmp	.+770    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    1652:	ab e3       	ldi	r26, 0x3B	; 59
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	eb e3       	ldi	r30, 0x3B	; 59
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <PORT_PortEnumSetPinMode+0x122>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <PORT_PortEnumSetPinMode+0x11e>
    1674:	84 2b       	or	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	6d c1       	rjmp	.+730    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    167a:	ab e3       	ldi	r26, 0x3B	; 59
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	eb e3       	ldi	r30, 0x3B	; 59
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <PORT_PortEnumSetPinMode+0x14a>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <PORT_PortEnumSetPinMode+0x146>
    169c:	80 95       	com	r24
    169e:	84 23       	and	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	58 c1       	rjmp	.+688    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTB:  // PORTB
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	3a 87       	std	Y+10, r19	; 0x0a
    16ac:	29 87       	std	Y+9, r18	; 0x09
    16ae:	89 85       	ldd	r24, Y+9	; 0x09
    16b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	91 05       	cpc	r25, r1
    16b6:	b1 f0       	breq	.+44     	; 0x16e4 <PORT_PortEnumSetPinMode+0x196>
    16b8:	29 85       	ldd	r18, Y+9	; 0x09
    16ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	2c f4       	brge	.+10     	; 0x16cc <PORT_PortEnumSetPinMode+0x17e>
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	09 f1       	breq	.+66     	; 0x170c <PORT_PortEnumSetPinMode+0x1be>
    16ca:	44 c1       	rjmp	.+648    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
    16cc:	29 85       	ldd	r18, Y+9	; 0x09
    16ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	81 f1       	breq	.+96     	; 0x1736 <PORT_PortEnumSetPinMode+0x1e8>
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	83 30       	cpi	r24, 0x03	; 3
    16dc:	91 05       	cpc	r25, r1
    16de:	09 f4       	brne	.+2      	; 0x16e2 <PORT_PortEnumSetPinMode+0x194>
    16e0:	3e c0       	rjmp	.+124    	; 0x175e <PORT_PortEnumSetPinMode+0x210>
    16e2:	38 c1       	rjmp	.+624    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    16e4:	a8 e3       	ldi	r26, 0x38	; 56
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e8 e3       	ldi	r30, 0x38	; 56
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <PORT_PortEnumSetPinMode+0x1b4>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <PORT_PortEnumSetPinMode+0x1b0>
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	24 c1       	rjmp	.+584    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    170c:	a8 e3       	ldi	r26, 0x38	; 56
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e8 e3       	ldi	r30, 0x38	; 56
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <PORT_PortEnumSetPinMode+0x1dc>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <PORT_PortEnumSetPinMode+0x1d8>
    172e:	80 95       	com	r24
    1730:	84 23       	and	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	0f c1       	rjmp	.+542    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    1736:	a8 e3       	ldi	r26, 0x38	; 56
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e8 e3       	ldi	r30, 0x38	; 56
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <PORT_PortEnumSetPinMode+0x206>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <PORT_PortEnumSetPinMode+0x202>
    1758:	84 2b       	or	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	fb c0       	rjmp	.+502    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    175e:	a8 e3       	ldi	r26, 0x38	; 56
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e8 e3       	ldi	r30, 0x38	; 56
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <PORT_PortEnumSetPinMode+0x22e>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <PORT_PortEnumSetPinMode+0x22a>
    1780:	80 95       	com	r24
    1782:	84 23       	and	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	e6 c0       	rjmp	.+460    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    1788:	8c 81       	ldd	r24, Y+4	; 0x04
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	38 87       	std	Y+8, r19	; 0x08
    1790:	2f 83       	std	Y+7, r18	; 0x07
    1792:	8f 81       	ldd	r24, Y+7	; 0x07
    1794:	98 85       	ldd	r25, Y+8	; 0x08
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	91 05       	cpc	r25, r1
    179a:	b1 f0       	breq	.+44     	; 0x17c8 <PORT_PortEnumSetPinMode+0x27a>
    179c:	2f 81       	ldd	r18, Y+7	; 0x07
    179e:	38 85       	ldd	r19, Y+8	; 0x08
    17a0:	22 30       	cpi	r18, 0x02	; 2
    17a2:	31 05       	cpc	r19, r1
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <PORT_PortEnumSetPinMode+0x262>
    17a6:	8f 81       	ldd	r24, Y+7	; 0x07
    17a8:	98 85       	ldd	r25, Y+8	; 0x08
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	09 f1       	breq	.+66     	; 0x17f0 <PORT_PortEnumSetPinMode+0x2a2>
    17ae:	d2 c0       	rjmp	.+420    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
    17b0:	2f 81       	ldd	r18, Y+7	; 0x07
    17b2:	38 85       	ldd	r19, Y+8	; 0x08
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	81 f1       	breq	.+96     	; 0x181a <PORT_PortEnumSetPinMode+0x2cc>
    17ba:	8f 81       	ldd	r24, Y+7	; 0x07
    17bc:	98 85       	ldd	r25, Y+8	; 0x08
    17be:	83 30       	cpi	r24, 0x03	; 3
    17c0:	91 05       	cpc	r25, r1
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <PORT_PortEnumSetPinMode+0x278>
    17c4:	3e c0       	rjmp	.+124    	; 0x1842 <PORT_PortEnumSetPinMode+0x2f4>
    17c6:	c6 c0       	rjmp	.+396    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    17c8:	a5 e3       	ldi	r26, 0x35	; 53
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e5 e3       	ldi	r30, 0x35	; 53
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <PORT_PortEnumSetPinMode+0x298>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <PORT_PortEnumSetPinMode+0x294>
    17ea:	84 2b       	or	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	b2 c0       	rjmp	.+356    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    17f0:	a5 e3       	ldi	r26, 0x35	; 53
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e5 e3       	ldi	r30, 0x35	; 53
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <PORT_PortEnumSetPinMode+0x2c0>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <PORT_PortEnumSetPinMode+0x2bc>
    1812:	80 95       	com	r24
    1814:	84 23       	and	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	9d c0       	rjmp	.+314    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    181a:	a5 e3       	ldi	r26, 0x35	; 53
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e5 e3       	ldi	r30, 0x35	; 53
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	48 2f       	mov	r20, r24
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 2e       	mov	r0, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <PORT_PortEnumSetPinMode+0x2ea>
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	0a 94       	dec	r0
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <PORT_PortEnumSetPinMode+0x2e6>
    183c:	84 2b       	or	r24, r20
    183e:	8c 93       	st	X, r24
    1840:	89 c0       	rjmp	.+274    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    1842:	a5 e3       	ldi	r26, 0x35	; 53
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e5 e3       	ldi	r30, 0x35	; 53
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <PORT_PortEnumSetPinMode+0x312>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <PORT_PortEnumSetPinMode+0x30e>
    1864:	80 95       	com	r24
    1866:	84 23       	and	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	74 c0       	rjmp	.+232    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	3e 83       	std	Y+6, r19	; 0x06
    1874:	2d 83       	std	Y+5, r18	; 0x05
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	91 05       	cpc	r25, r1
    187e:	b1 f0       	breq	.+44     	; 0x18ac <PORT_PortEnumSetPinMode+0x35e>
    1880:	2d 81       	ldd	r18, Y+5	; 0x05
    1882:	3e 81       	ldd	r19, Y+6	; 0x06
    1884:	22 30       	cpi	r18, 0x02	; 2
    1886:	31 05       	cpc	r19, r1
    1888:	2c f4       	brge	.+10     	; 0x1894 <PORT_PortEnumSetPinMode+0x346>
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	09 f1       	breq	.+66     	; 0x18d4 <PORT_PortEnumSetPinMode+0x386>
    1892:	60 c0       	rjmp	.+192    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
    1894:	2d 81       	ldd	r18, Y+5	; 0x05
    1896:	3e 81       	ldd	r19, Y+6	; 0x06
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	81 f1       	breq	.+96     	; 0x18fe <PORT_PortEnumSetPinMode+0x3b0>
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	91 05       	cpc	r25, r1
    18a6:	09 f4       	brne	.+2      	; 0x18aa <PORT_PortEnumSetPinMode+0x35c>
    18a8:	3e c0       	rjmp	.+124    	; 0x1926 <PORT_PortEnumSetPinMode+0x3d8>
    18aa:	54 c0       	rjmp	.+168    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    18ac:	a2 e3       	ldi	r26, 0x32	; 50
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e2 e3       	ldi	r30, 0x32	; 50
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <PORT_PortEnumSetPinMode+0x37c>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <PORT_PortEnumSetPinMode+0x378>
    18ce:	84 2b       	or	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	40 c0       	rjmp	.+128    	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    18d4:	a2 e3       	ldi	r26, 0x32	; 50
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e2 e3       	ldi	r30, 0x32	; 50
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	48 2f       	mov	r20, r24
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 2e       	mov	r0, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <PORT_PortEnumSetPinMode+0x3a4>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <PORT_PortEnumSetPinMode+0x3a0>
    18f6:	80 95       	com	r24
    18f8:	84 23       	and	r24, r20
    18fa:	8c 93       	st	X, r24
    18fc:	2b c0       	rjmp	.+86     	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    18fe:	a2 e3       	ldi	r26, 0x32	; 50
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e2 e3       	ldi	r30, 0x32	; 50
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 2e       	mov	r0, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <PORT_PortEnumSetPinMode+0x3ce>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <PORT_PortEnumSetPinMode+0x3ca>
    1920:	84 2b       	or	r24, r20
    1922:	8c 93       	st	X, r24
    1924:	17 c0       	rjmp	.+46     	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1926:	a2 e3       	ldi	r26, 0x32	; 50
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e2 e3       	ldi	r30, 0x32	; 50
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	48 2f       	mov	r20, r24
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 2e       	mov	r0, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <PORT_PortEnumSetPinMode+0x3f6>
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	0a 94       	dec	r0
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <PORT_PortEnumSetPinMode+0x3f2>
    1948:	80 95       	com	r24
    194a:	84 23       	and	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <PORT_PortEnumSetPinMode+0x406>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_MODE_NOK;
    1950:	83 e0       	ldi	r24, 0x03	; 3
    1952:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
    1954:	89 81       	ldd	r24, Y+1	; 0x01
}
    1956:	2e 96       	adiw	r28, 0x0e	; 14
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <GIE_voidInt>:

#include "../Include/GIE_interface.h"
#include "../Include/GIE_private.h"

void GIE_voidInt(u8 copy_u8State)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <GIE_voidInt+0x6>
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	89 83       	std	Y+1, r24	; 0x01
    switch(copy_u8State)
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	3b 83       	std	Y+3, r19	; 0x03
    197e:	2a 83       	std	Y+2, r18	; 0x02
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	9b 81       	ldd	r25, Y+3	; 0x03
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	31 f0       	breq	.+12     	; 0x1994 <GIE_voidInt+0x2c>
    1988:	2a 81       	ldd	r18, Y+2	; 0x02
    198a:	3b 81       	ldd	r19, Y+3	; 0x03
    198c:	21 30       	cpi	r18, 0x01	; 1
    198e:	31 05       	cpc	r19, r1
    1990:	49 f0       	breq	.+18     	; 0x19a4 <GIE_voidInt+0x3c>
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <GIE_voidInt+0x4a>
    {
        case GIE_u8_ENABLE :  SET_BIT(GIE_u8_SREG,7);       break;
    1994:	af e5       	ldi	r26, 0x5F	; 95
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ef e5       	ldi	r30, 0x5F	; 95
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	80 68       	ori	r24, 0x80	; 128
    19a0:	8c 93       	st	X, r24
    19a2:	07 c0       	rjmp	.+14     	; 0x19b2 <GIE_voidInt+0x4a>
        case GIE_u8_DISABLE:  CLR_BIT(GIE_u8_SREG,7);       break;
    19a4:	af e5       	ldi	r26, 0x5F	; 95
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ef e5       	ldi	r30, 0x5F	; 95
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 77       	andi	r24, 0x7F	; 127
    19b0:	8c 93       	st	X, r24
    }
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <EXTI_EXTIEnumEnable>:

/* Array of Pointer to Function */
static void (*EXTI_Apf[3])(void);

EXTIEnum EXTI_EXTIEnumEnable(u8 copy_u8IntIndex,u8 copy_u8IntMode)
{
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	2b 97       	sbiw	r28, 0x0b	; 11
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	8a 83       	std	Y+2, r24	; 0x02
    19d4:	6b 83       	std	Y+3, r22	; 0x03
    EXTIEnum local_EXTIEnumErrorState = EXTI_Enable_OK;
    19d6:	19 82       	std	Y+1, r1	; 0x01
    if((copy_u8IntIndex <= EXTI_u8_INT_2) && (copy_u8IntMode <= EXTI_u8_ON_CHANGE))
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	83 30       	cpi	r24, 0x03	; 3
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <EXTI_EXTIEnumEnable+0x22>
    19de:	07 c1       	rjmp	.+526    	; 0x1bee <EXTI_EXTIEnumEnable+0x230>
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	84 30       	cpi	r24, 0x04	; 4
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <EXTI_EXTIEnumEnable+0x2a>
    19e6:	03 c1       	rjmp	.+518    	; 0x1bee <EXTI_EXTIEnumEnable+0x230>
    {
        /* choosing which interrupt needed */
        switch(copy_u8IntIndex)
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	3b 87       	std	Y+11, r19	; 0x0b
    19f0:	2a 87       	std	Y+10, r18	; 0x0a
    19f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    19f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	91 05       	cpc	r25, r1
    19fa:	09 f4       	brne	.+2      	; 0x19fe <EXTI_EXTIEnumEnable+0x40>
    19fc:	6d c0       	rjmp	.+218    	; 0x1ad8 <EXTI_EXTIEnumEnable+0x11a>
    19fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a00:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <EXTI_EXTIEnumEnable+0x4c>
    1a08:	c9 c0       	rjmp	.+402    	; 0x1b9c <EXTI_EXTIEnumEnable+0x1de>
    1a0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <EXTI_EXTIEnumEnable+0x56>
    1a12:	ef c0       	rjmp	.+478    	; 0x1bf2 <EXTI_EXTIEnumEnable+0x234>
        {
            case EXTI_u8_INT_0:  // Interrupt 0
            /* choosing which mode needed */
            switch(copy_u8IntMode)
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	39 87       	std	Y+9, r19	; 0x09
    1a1c:	28 87       	std	Y+8, r18	; 0x08
    1a1e:	88 85       	ldd	r24, Y+8	; 0x08
    1a20:	99 85       	ldd	r25, Y+9	; 0x09
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	91 05       	cpc	r25, r1
    1a26:	21 f1       	breq	.+72     	; 0x1a70 <EXTI_EXTIEnumEnable+0xb2>
    1a28:	28 85       	ldd	r18, Y+8	; 0x08
    1a2a:	39 85       	ldd	r19, Y+9	; 0x09
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 05       	cpc	r19, r1
    1a30:	2c f4       	brge	.+10     	; 0x1a3c <EXTI_EXTIEnumEnable+0x7e>
    1a32:	88 85       	ldd	r24, Y+8	; 0x08
    1a34:	99 85       	ldd	r25, Y+9	; 0x09
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	61 f0       	breq	.+24     	; 0x1a52 <EXTI_EXTIEnumEnable+0x94>
    1a3a:	46 c0       	rjmp	.+140    	; 0x1ac8 <EXTI_EXTIEnumEnable+0x10a>
    1a3c:	28 85       	ldd	r18, Y+8	; 0x08
    1a3e:	39 85       	ldd	r19, Y+9	; 0x09
    1a40:	22 30       	cpi	r18, 0x02	; 2
    1a42:	31 05       	cpc	r19, r1
    1a44:	21 f1       	breq	.+72     	; 0x1a8e <EXTI_EXTIEnumEnable+0xd0>
    1a46:	88 85       	ldd	r24, Y+8	; 0x08
    1a48:	99 85       	ldd	r25, Y+9	; 0x09
    1a4a:	83 30       	cpi	r24, 0x03	; 3
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	71 f1       	breq	.+92     	; 0x1aac <EXTI_EXTIEnumEnable+0xee>
    1a50:	3b c0       	rjmp	.+118    	; 0x1ac8 <EXTI_EXTIEnumEnable+0x10a>
            {
                case EXTI_u8_RISING   :  // in case rising edge
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC00_BIT);
    1a52:	a5 e5       	ldi	r26, 0x55	; 85
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e5 e5       	ldi	r30, 0x55	; 85
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	81 60       	ori	r24, 0x01	; 1
    1a5e:	8c 93       	st	X, r24
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC01_BIT);        break;
    1a60:	a5 e5       	ldi	r26, 0x55	; 85
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e5 e5       	ldi	r30, 0x55	; 85
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	82 60       	ori	r24, 0x02	; 2
    1a6c:	8c 93       	st	X, r24
    1a6e:	2c c0       	rjmp	.+88     	; 0x1ac8 <EXTI_EXTIEnumEnable+0x10a>
                case EXTI_u8_FALLING  : // in case falling edge
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC00_BIT);
    1a70:	a5 e5       	ldi	r26, 0x55	; 85
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e5 e5       	ldi	r30, 0x55	; 85
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	8e 7f       	andi	r24, 0xFE	; 254
    1a7c:	8c 93       	st	X, r24
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC01_BIT);        break;
    1a7e:	a5 e5       	ldi	r26, 0x55	; 85
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e5 e5       	ldi	r30, 0x55	; 85
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	82 60       	ori	r24, 0x02	; 2
    1a8a:	8c 93       	st	X, r24
    1a8c:	1d c0       	rjmp	.+58     	; 0x1ac8 <EXTI_EXTIEnumEnable+0x10a>
                case EXTI_u8_LOW_LEVEL: // in case low level
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC00_BIT);
    1a8e:	a5 e5       	ldi	r26, 0x55	; 85
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e5 e5       	ldi	r30, 0x55	; 85
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8e 7f       	andi	r24, 0xFE	; 254
    1a9a:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC01_BIT);        break;
    1a9c:	a5 e5       	ldi	r26, 0x55	; 85
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e5 e5       	ldi	r30, 0x55	; 85
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8d 7f       	andi	r24, 0xFD	; 253
    1aa8:	8c 93       	st	X, r24
    1aaa:	0e c0       	rjmp	.+28     	; 0x1ac8 <EXTI_EXTIEnumEnable+0x10a>
                case EXTI_u8_ON_CHANGE: // in case any logical change
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC00_BIT);
    1aac:	a5 e5       	ldi	r26, 0x55	; 85
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e5 e5       	ldi	r30, 0x55	; 85
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	81 60       	ori	r24, 0x01	; 1
    1ab8:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC01_BIT);        break;
    1aba:	a5 e5       	ldi	r26, 0x55	; 85
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e5 e5       	ldi	r30, 0x55	; 85
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8d 7f       	andi	r24, 0xFD	; 253
    1ac6:	8c 93       	st	X, r24
            }
            /* enable EXTI0 */
            SET_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT0_BIT);
    1ac8:	ab e5       	ldi	r26, 0x5B	; 91
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	eb e5       	ldi	r30, 0x5B	; 91
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 64       	ori	r24, 0x40	; 64
    1ad4:	8c 93       	st	X, r24
    1ad6:	8d c0       	rjmp	.+282    	; 0x1bf2 <EXTI_EXTIEnumEnable+0x234>
            break;
            case EXTI_u8_INT_1:  // Interrupt 1
            switch(copy_u8IntMode)
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	3f 83       	std	Y+7, r19	; 0x07
    1ae0:	2e 83       	std	Y+6, r18	; 0x06
    1ae2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	91 05       	cpc	r25, r1
    1aea:	21 f1       	breq	.+72     	; 0x1b34 <EXTI_EXTIEnumEnable+0x176>
    1aec:	2e 81       	ldd	r18, Y+6	; 0x06
    1aee:	3f 81       	ldd	r19, Y+7	; 0x07
    1af0:	22 30       	cpi	r18, 0x02	; 2
    1af2:	31 05       	cpc	r19, r1
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <EXTI_EXTIEnumEnable+0x142>
    1af6:	8e 81       	ldd	r24, Y+6	; 0x06
    1af8:	9f 81       	ldd	r25, Y+7	; 0x07
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	61 f0       	breq	.+24     	; 0x1b16 <EXTI_EXTIEnumEnable+0x158>
    1afe:	46 c0       	rjmp	.+140    	; 0x1b8c <EXTI_EXTIEnumEnable+0x1ce>
    1b00:	2e 81       	ldd	r18, Y+6	; 0x06
    1b02:	3f 81       	ldd	r19, Y+7	; 0x07
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	21 f1       	breq	.+72     	; 0x1b52 <EXTI_EXTIEnumEnable+0x194>
    1b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0e:	83 30       	cpi	r24, 0x03	; 3
    1b10:	91 05       	cpc	r25, r1
    1b12:	71 f1       	breq	.+92     	; 0x1b70 <EXTI_EXTIEnumEnable+0x1b2>
    1b14:	3b c0       	rjmp	.+118    	; 0x1b8c <EXTI_EXTIEnumEnable+0x1ce>
            {
                case EXTI_u8_RISING   : // in case rising edge
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC10_BIT);
    1b16:	a5 e5       	ldi	r26, 0x55	; 85
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e5 e5       	ldi	r30, 0x55	; 85
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	84 60       	ori	r24, 0x04	; 4
    1b22:	8c 93       	st	X, r24
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC11_BIT);        break;
    1b24:	a5 e5       	ldi	r26, 0x55	; 85
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e5 e5       	ldi	r30, 0x55	; 85
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	88 60       	ori	r24, 0x08	; 8
    1b30:	8c 93       	st	X, r24
    1b32:	2c c0       	rjmp	.+88     	; 0x1b8c <EXTI_EXTIEnumEnable+0x1ce>
                case EXTI_u8_FALLING  : // in case falling edge
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC10_BIT);
    1b34:	a5 e5       	ldi	r26, 0x55	; 85
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e5 e5       	ldi	r30, 0x55	; 85
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8b 7f       	andi	r24, 0xFB	; 251
    1b40:	8c 93       	st	X, r24
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC11_BIT);        break;
    1b42:	a5 e5       	ldi	r26, 0x55	; 85
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e5 e5       	ldi	r30, 0x55	; 85
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	88 60       	ori	r24, 0x08	; 8
    1b4e:	8c 93       	st	X, r24
    1b50:	1d c0       	rjmp	.+58     	; 0x1b8c <EXTI_EXTIEnumEnable+0x1ce>
                case EXTI_u8_LOW_LEVEL: // in case low level
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC10_BIT);
    1b52:	a5 e5       	ldi	r26, 0x55	; 85
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e5 e5       	ldi	r30, 0x55	; 85
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	8b 7f       	andi	r24, 0xFB	; 251
    1b5e:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC11_BIT);        break;
    1b60:	a5 e5       	ldi	r26, 0x55	; 85
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e5 e5       	ldi	r30, 0x55	; 85
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	87 7f       	andi	r24, 0xF7	; 247
    1b6c:	8c 93       	st	X, r24
    1b6e:	0e c0       	rjmp	.+28     	; 0x1b8c <EXTI_EXTIEnumEnable+0x1ce>
                case EXTI_u8_ON_CHANGE: // in case any logical change
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC10_BIT);
    1b70:	a5 e5       	ldi	r26, 0x55	; 85
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e5 e5       	ldi	r30, 0x55	; 85
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	84 60       	ori	r24, 0x04	; 4
    1b7c:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC11_BIT);        break;
    1b7e:	a5 e5       	ldi	r26, 0x55	; 85
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e5       	ldi	r30, 0x55	; 85
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	87 7f       	andi	r24, 0xF7	; 247
    1b8a:	8c 93       	st	X, r24
            }
            /* enable EXTI1 */
            SET_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT1_BIT);
    1b8c:	ab e5       	ldi	r26, 0x5B	; 91
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	eb e5       	ldi	r30, 0x5B	; 91
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	80 68       	ori	r24, 0x80	; 128
    1b98:	8c 93       	st	X, r24
    1b9a:	2b c0       	rjmp	.+86     	; 0x1bf2 <EXTI_EXTIEnumEnable+0x234>
            break;
            case EXTI_u8_INT_2:  // Interrupt 2
            switch(copy_u8IntMode)
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	3d 83       	std	Y+5, r19	; 0x05
    1ba4:	2c 83       	std	Y+4, r18	; 0x04
    1ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	31 f0       	breq	.+12     	; 0x1bba <EXTI_EXTIEnumEnable+0x1fc>
    1bae:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb2:	21 30       	cpi	r18, 0x01	; 1
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	49 f0       	breq	.+18     	; 0x1bca <EXTI_EXTIEnumEnable+0x20c>
    1bb8:	10 c0       	rjmp	.+32     	; 0x1bda <EXTI_EXTIEnumEnable+0x21c>
            {
                case EXTI_u8_RISING   : // in case rising edge
                SET_BIT(EXTI_u8_MCUCSR_REG,EXTI_u8_ISC2_BIT);        break;
    1bba:	a4 e5       	ldi	r26, 0x54	; 84
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e4 e5       	ldi	r30, 0x54	; 84
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	80 64       	ori	r24, 0x40	; 64
    1bc6:	8c 93       	st	X, r24
    1bc8:	0a c0       	rjmp	.+20     	; 0x1bde <EXTI_EXTIEnumEnable+0x220>
                case EXTI_u8_FALLING  : // in case falling edge
                CLR_BIT(EXTI_u8_MCUCSR_REG,EXTI_u8_ISC2_BIT);        break;
    1bca:	a4 e5       	ldi	r26, 0x54	; 84
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e4 e5       	ldi	r30, 0x54	; 84
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8f 7b       	andi	r24, 0xBF	; 191
    1bd6:	8c 93       	st	X, r24
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <EXTI_EXTIEnumEnable+0x220>
                default: local_EXTIEnumErrorState = EXTI_Enable_NOK; break;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	89 83       	std	Y+1, r24	; 0x01
            }
            /* enable EXTI2 */
            SET_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT2_BIT);
    1bde:	ab e5       	ldi	r26, 0x5B	; 91
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	eb e5       	ldi	r30, 0x5B	; 91
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	80 62       	ori	r24, 0x20	; 32
    1bea:	8c 93       	st	X, r24
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <EXTI_EXTIEnumEnable+0x234>
            break;
        }
    }
    else
    {
        local_EXTIEnumErrorState = EXTI_Enable_NOK;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_EXTIEnumErrorState;
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf4:	2b 96       	adiw	r28, 0x0b	; 11
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <EXTI_EXTIEnumDisable>:

EXTIEnum EXTI_EXTIEnumDisable(u8 copy_u8IntIndex)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <EXTI_EXTIEnumDisable+0x6>
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <EXTI_EXTIEnumDisable+0x8>
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	8a 83       	std	Y+2, r24	; 0x02
    EXTIEnum local_EXTIEnumErrorState = EXTI_Disable_OK;
    1c14:	82 e0       	ldi	r24, 0x02	; 2
    1c16:	89 83       	std	Y+1, r24	; 0x01
    if(copy_u8IntIndex <= EXTI_u8_INT_2)
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	83 30       	cpi	r24, 0x03	; 3
    1c1c:	58 f5       	brcc	.+86     	; 0x1c74 <EXTI_EXTIEnumDisable+0x6e>
    {
        switch(copy_u8IntIndex)
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3c 83       	std	Y+4, r19	; 0x04
    1c26:	2b 83       	std	Y+3, r18	; 0x03
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	91 05       	cpc	r25, r1
    1c30:	89 f0       	breq	.+34     	; 0x1c54 <EXTI_EXTIEnumDisable+0x4e>
    1c32:	2b 81       	ldd	r18, Y+3	; 0x03
    1c34:	3c 81       	ldd	r19, Y+4	; 0x04
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	a1 f0       	breq	.+40     	; 0x1c64 <EXTI_EXTIEnumDisable+0x5e>
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	d1 f4       	brne	.+52     	; 0x1c78 <EXTI_EXTIEnumDisable+0x72>
        {
            case EXTI_u8_INT_0:
            /* disable EXTI0 */
            CLR_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT0_BIT);       break;
    1c44:	ab e5       	ldi	r26, 0x5B	; 91
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	eb e5       	ldi	r30, 0x5B	; 91
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8f 7b       	andi	r24, 0xBF	; 191
    1c50:	8c 93       	st	X, r24
    1c52:	12 c0       	rjmp	.+36     	; 0x1c78 <EXTI_EXTIEnumDisable+0x72>
            case EXTI_u8_INT_1:
            /* disable EXTI1 */
            CLR_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT1_BIT);       break;
    1c54:	ab e5       	ldi	r26, 0x5B	; 91
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	eb e5       	ldi	r30, 0x5B	; 91
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8f 77       	andi	r24, 0x7F	; 127
    1c60:	8c 93       	st	X, r24
    1c62:	0a c0       	rjmp	.+20     	; 0x1c78 <EXTI_EXTIEnumDisable+0x72>
            case EXTI_u8_INT_2:
            /* disable EXTI2 */
            CLR_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT2_BIT);       break;
    1c64:	ab e5       	ldi	r26, 0x5B	; 91
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	eb e5       	ldi	r30, 0x5B	; 91
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8f 7d       	andi	r24, 0xDF	; 223
    1c70:	8c 93       	st	X, r24
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <EXTI_EXTIEnumDisable+0x72>
        }
    }
    else
    {
        local_EXTIEnumErrorState = EXTI_Disable_NOK;
    1c74:	83 e0       	ldi	r24, 0x03	; 3
    1c76:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_EXTIEnumErrorState;
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <EXTI_EXTIEnumSetCallback>:

EXTIEnum EXTI_EXTIEnumSetCallback(u8 copy_u8IntIndex,void (*copy_pf)(void))
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <EXTI_EXTIEnumSetCallback+0x6>
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <EXTI_EXTIEnumSetCallback+0x8>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	8a 83       	std	Y+2, r24	; 0x02
    1c96:	7c 83       	std	Y+4, r23	; 0x04
    1c98:	6b 83       	std	Y+3, r22	; 0x03
    EXTIEnum local_EXTIEnumErrorState = EXTI_Disable_OK;
    1c9a:	82 e0       	ldi	r24, 0x02	; 2
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    if((copy_u8IntIndex <= EXTI_u8_INT_2) && (copy_pf != NULL))
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	83 30       	cpi	r24, 0x03	; 3
    1ca2:	88 f4       	brcc	.+34     	; 0x1cc6 <EXTI_EXTIEnumSetCallback+0x3e>
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	69 f0       	breq	.+26     	; 0x1cc6 <EXTI_EXTIEnumSetCallback+0x3e>
    {
        /* update the global pointer to function */
        EXTI_Apf[copy_u8IntIndex] = copy_pf;
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	e2 56       	subi	r30, 0x62	; 98
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <EXTI_EXTIEnumSetCallback+0x42>
    }
    else
    {
        local_EXTIEnumErrorState = EXTI_Disable_NOK;
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_EXTIEnumErrorState;
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <__vector_1>:

/* ISR function for EXTI0 */
void __vector_1(void)     __attribute__((signal));
void __vector_1(void)
{
    1cda:	1f 92       	push	r1
    1cdc:	0f 92       	push	r0
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	0f 92       	push	r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	2f 93       	push	r18
    1ce6:	3f 93       	push	r19
    1ce8:	4f 93       	push	r20
    1cea:	5f 93       	push	r21
    1cec:	6f 93       	push	r22
    1cee:	7f 93       	push	r23
    1cf0:	8f 93       	push	r24
    1cf2:	9f 93       	push	r25
    1cf4:	af 93       	push	r26
    1cf6:	bf 93       	push	r27
    1cf8:	ef 93       	push	r30
    1cfa:	ff 93       	push	r31
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_Apf[EXTI_u8_INT_0] != NULL)
    1d04:	80 91 9e 00 	lds	r24, 0x009E
    1d08:	90 91 9f 00 	lds	r25, 0x009F
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	29 f0       	breq	.+10     	; 0x1d1a <__vector_1+0x40>
    {
        /* call the global pointer to function */
        EXTI_Apf[EXTI_u8_INT_0]();
    1d10:	e0 91 9e 00 	lds	r30, 0x009E
    1d14:	f0 91 9f 00 	lds	r31, 0x009F
    1d18:	09 95       	icall
    }
}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	ff 91       	pop	r31
    1d20:	ef 91       	pop	r30
    1d22:	bf 91       	pop	r27
    1d24:	af 91       	pop	r26
    1d26:	9f 91       	pop	r25
    1d28:	8f 91       	pop	r24
    1d2a:	7f 91       	pop	r23
    1d2c:	6f 91       	pop	r22
    1d2e:	5f 91       	pop	r21
    1d30:	4f 91       	pop	r20
    1d32:	3f 91       	pop	r19
    1d34:	2f 91       	pop	r18
    1d36:	0f 90       	pop	r0
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	0f 90       	pop	r0
    1d3c:	1f 90       	pop	r1
    1d3e:	18 95       	reti

00001d40 <__vector_2>:

/* ISR function for EXTI1 */
void __vector_2(void)     __attribute__((signal));
void __vector_2(void)
{
    1d40:	1f 92       	push	r1
    1d42:	0f 92       	push	r0
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	0f 92       	push	r0
    1d48:	11 24       	eor	r1, r1
    1d4a:	2f 93       	push	r18
    1d4c:	3f 93       	push	r19
    1d4e:	4f 93       	push	r20
    1d50:	5f 93       	push	r21
    1d52:	6f 93       	push	r22
    1d54:	7f 93       	push	r23
    1d56:	8f 93       	push	r24
    1d58:	9f 93       	push	r25
    1d5a:	af 93       	push	r26
    1d5c:	bf 93       	push	r27
    1d5e:	ef 93       	push	r30
    1d60:	ff 93       	push	r31
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_Apf[EXTI_u8_INT_1] != NULL)
    1d6a:	80 91 a0 00 	lds	r24, 0x00A0
    1d6e:	90 91 a1 00 	lds	r25, 0x00A1
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	29 f0       	breq	.+10     	; 0x1d80 <__vector_2+0x40>
    {
        /* call the global pointer to function */
        EXTI_Apf[EXTI_u8_INT_1]();
    1d76:	e0 91 a0 00 	lds	r30, 0x00A0
    1d7a:	f0 91 a1 00 	lds	r31, 0x00A1
    1d7e:	09 95       	icall
    }
}
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	ff 91       	pop	r31
    1d86:	ef 91       	pop	r30
    1d88:	bf 91       	pop	r27
    1d8a:	af 91       	pop	r26
    1d8c:	9f 91       	pop	r25
    1d8e:	8f 91       	pop	r24
    1d90:	7f 91       	pop	r23
    1d92:	6f 91       	pop	r22
    1d94:	5f 91       	pop	r21
    1d96:	4f 91       	pop	r20
    1d98:	3f 91       	pop	r19
    1d9a:	2f 91       	pop	r18
    1d9c:	0f 90       	pop	r0
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	0f 90       	pop	r0
    1da2:	1f 90       	pop	r1
    1da4:	18 95       	reti

00001da6 <__vector_3>:

/* ISR function for EXTI2 */
void __vector_3(void)     __attribute__((signal));
void __vector_3(void)
{
    1da6:	1f 92       	push	r1
    1da8:	0f 92       	push	r0
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	0f 92       	push	r0
    1dae:	11 24       	eor	r1, r1
    1db0:	2f 93       	push	r18
    1db2:	3f 93       	push	r19
    1db4:	4f 93       	push	r20
    1db6:	5f 93       	push	r21
    1db8:	6f 93       	push	r22
    1dba:	7f 93       	push	r23
    1dbc:	8f 93       	push	r24
    1dbe:	9f 93       	push	r25
    1dc0:	af 93       	push	r26
    1dc2:	bf 93       	push	r27
    1dc4:	ef 93       	push	r30
    1dc6:	ff 93       	push	r31
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_Apf[EXTI_u8_INT_2] != NULL)
    1dd0:	80 91 a2 00 	lds	r24, 0x00A2
    1dd4:	90 91 a3 00 	lds	r25, 0x00A3
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	29 f0       	breq	.+10     	; 0x1de6 <__vector_3+0x40>
    {
        /* call the global pointer to function */
        EXTI_Apf[EXTI_u8_INT_2]();
    1ddc:	e0 91 a2 00 	lds	r30, 0x00A2
    1de0:	f0 91 a3 00 	lds	r31, 0x00A3
    1de4:	09 95       	icall
    }
}
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	ff 91       	pop	r31
    1dec:	ef 91       	pop	r30
    1dee:	bf 91       	pop	r27
    1df0:	af 91       	pop	r26
    1df2:	9f 91       	pop	r25
    1df4:	8f 91       	pop	r24
    1df6:	7f 91       	pop	r23
    1df8:	6f 91       	pop	r22
    1dfa:	5f 91       	pop	r21
    1dfc:	4f 91       	pop	r20
    1dfe:	3f 91       	pop	r19
    1e00:	2f 91       	pop	r18
    1e02:	0f 90       	pop	r0
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	0f 90       	pop	r0
    1e08:	1f 90       	pop	r1
    1e0a:	18 95       	reti

00001e0c <DIO_DioEnumWriteChannel>:
#include "../Include/DIO_interface.h"
#include "../Include/DIO_private.h"
#include "../Include/DIO_config.h"

DioEnum DIO_DioEnumWriteChannel(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Level)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	2e 97       	sbiw	r28, 0x0e	; 14
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	8a 83       	std	Y+2, r24	; 0x02
    1e22:	6b 83       	std	Y+3, r22	; 0x03
    1e24:	4c 83       	std	Y+4, r20	; 0x04
	DioEnum local_DioEnumErrorState = DIO_WRITE_OK;
    1e26:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	84 30       	cpi	r24, 0x04	; 4
    1e2c:	08 f0       	brcs	.+2      	; 0x1e30 <DIO_DioEnumWriteChannel+0x24>
    1e2e:	05 c1       	rjmp	.+522    	; 0x203a <DIO_DioEnumWriteChannel+0x22e>
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	88 30       	cpi	r24, 0x08	; 8
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <DIO_DioEnumWriteChannel+0x2c>
    1e36:	01 c1       	rjmp	.+514    	; 0x203a <DIO_DioEnumWriteChannel+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	3e 87       	std	Y+14, r19	; 0x0e
    1e40:	2d 87       	std	Y+13, r18	; 0x0d
    1e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	91 05       	cpc	r25, r1
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <DIO_DioEnumWriteChannel+0x42>
    1e4c:	4f c0       	rjmp	.+158    	; 0x1eec <DIO_DioEnumWriteChannel+0xe0>
    1e4e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e50:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e52:	22 30       	cpi	r18, 0x02	; 2
    1e54:	31 05       	cpc	r19, r1
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <DIO_DioEnumWriteChannel+0x56>
    1e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	71 f0       	breq	.+28     	; 0x1e7c <DIO_DioEnumWriteChannel+0x70>
    1e60:	ee c0       	rjmp	.+476    	; 0x203e <DIO_DioEnumWriteChannel+0x232>
    1e62:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e64:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e66:	22 30       	cpi	r18, 0x02	; 2
    1e68:	31 05       	cpc	r19, r1
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <DIO_DioEnumWriteChannel+0x62>
    1e6c:	77 c0       	rjmp	.+238    	; 0x1f5c <DIO_DioEnumWriteChannel+0x150>
    1e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e72:	83 30       	cpi	r24, 0x03	; 3
    1e74:	91 05       	cpc	r25, r1
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <DIO_DioEnumWriteChannel+0x6e>
    1e78:	a9 c0       	rjmp	.+338    	; 0x1fcc <DIO_DioEnumWriteChannel+0x1c0>
    1e7a:	e1 c0       	rjmp	.+450    	; 0x203e <DIO_DioEnumWriteChannel+0x232>
		{
			case DIO_u8_PORTA:  // PORTA
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	3c 87       	std	Y+12, r19	; 0x0c
    1e84:	2b 87       	std	Y+11, r18	; 0x0b
    1e86:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e88:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	d1 f0       	breq	.+52     	; 0x1ec2 <DIO_DioEnumWriteChannel+0xb6>
    1e8e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e90:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e92:	21 30       	cpi	r18, 0x01	; 1
    1e94:	31 05       	cpc	r19, r1
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <DIO_DioEnumWriteChannel+0x8e>
    1e98:	d2 c0       	rjmp	.+420    	; 0x203e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    1e9a:	ab e3       	ldi	r26, 0x3B	; 59
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	eb e3       	ldi	r30, 0x3B	; 59
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	48 2f       	mov	r20, r24
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	02 2e       	mov	r0, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <DIO_DioEnumWriteChannel+0xac>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	0a 94       	dec	r0
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <DIO_DioEnumWriteChannel+0xa8>
    1ebc:	84 2b       	or	r24, r20
    1ebe:	8c 93       	st	X, r24
    1ec0:	be c0       	rjmp	.+380    	; 0x203e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    1ec2:	ab e3       	ldi	r26, 0x3B	; 59
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	eb e3       	ldi	r30, 0x3B	; 59
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	48 2f       	mov	r20, r24
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 2e       	mov	r0, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <DIO_DioEnumWriteChannel+0xd4>
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	0a 94       	dec	r0
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <DIO_DioEnumWriteChannel+0xd0>
    1ee4:	80 95       	com	r24
    1ee6:	84 23       	and	r24, r20
    1ee8:	8c 93       	st	X, r24
    1eea:	a9 c0       	rjmp	.+338    	; 0x203e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1eec:	8c 81       	ldd	r24, Y+4	; 0x04
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	3a 87       	std	Y+10, r19	; 0x0a
    1ef4:	29 87       	std	Y+9, r18	; 0x09
    1ef6:	89 85       	ldd	r24, Y+9	; 0x09
    1ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	d1 f0       	breq	.+52     	; 0x1f32 <DIO_DioEnumWriteChannel+0x126>
    1efe:	29 85       	ldd	r18, Y+9	; 0x09
    1f00:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f02:	21 30       	cpi	r18, 0x01	; 1
    1f04:	31 05       	cpc	r19, r1
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <DIO_DioEnumWriteChannel+0xfe>
    1f08:	9a c0       	rjmp	.+308    	; 0x203e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    1f0a:	a8 e3       	ldi	r26, 0x38	; 56
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e8 e3       	ldi	r30, 0x38	; 56
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	48 2f       	mov	r20, r24
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	02 2e       	mov	r0, r18
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <DIO_DioEnumWriteChannel+0x11c>
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	0a 94       	dec	r0
    1f2a:	e2 f7       	brpl	.-8      	; 0x1f24 <DIO_DioEnumWriteChannel+0x118>
    1f2c:	84 2b       	or	r24, r20
    1f2e:	8c 93       	st	X, r24
    1f30:	86 c0       	rjmp	.+268    	; 0x203e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    1f32:	a8 e3       	ldi	r26, 0x38	; 56
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e8 e3       	ldi	r30, 0x38	; 56
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	48 2f       	mov	r20, r24
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	02 2e       	mov	r0, r18
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <DIO_DioEnumWriteChannel+0x144>
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	0a 94       	dec	r0
    1f52:	e2 f7       	brpl	.-8      	; 0x1f4c <DIO_DioEnumWriteChannel+0x140>
    1f54:	80 95       	com	r24
    1f56:	84 23       	and	r24, r20
    1f58:	8c 93       	st	X, r24
    1f5a:	71 c0       	rjmp	.+226    	; 0x203e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	38 87       	std	Y+8, r19	; 0x08
    1f64:	2f 83       	std	Y+7, r18	; 0x07
    1f66:	8f 81       	ldd	r24, Y+7	; 0x07
    1f68:	98 85       	ldd	r25, Y+8	; 0x08
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	d1 f0       	breq	.+52     	; 0x1fa2 <DIO_DioEnumWriteChannel+0x196>
    1f6e:	2f 81       	ldd	r18, Y+7	; 0x07
    1f70:	38 85       	ldd	r19, Y+8	; 0x08
    1f72:	21 30       	cpi	r18, 0x01	; 1
    1f74:	31 05       	cpc	r19, r1
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <DIO_DioEnumWriteChannel+0x16e>
    1f78:	62 c0       	rjmp	.+196    	; 0x203e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    1f7a:	a5 e3       	ldi	r26, 0x35	; 53
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e5 e3       	ldi	r30, 0x35	; 53
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	48 2f       	mov	r20, r24
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	02 2e       	mov	r0, r18
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <DIO_DioEnumWriteChannel+0x18c>
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	0a 94       	dec	r0
    1f9a:	e2 f7       	brpl	.-8      	; 0x1f94 <DIO_DioEnumWriteChannel+0x188>
    1f9c:	84 2b       	or	r24, r20
    1f9e:	8c 93       	st	X, r24
    1fa0:	4e c0       	rjmp	.+156    	; 0x203e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    1fa2:	a5 e3       	ldi	r26, 0x35	; 53
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e5 e3       	ldi	r30, 0x35	; 53
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	48 2f       	mov	r20, r24
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	02 2e       	mov	r0, r18
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <DIO_DioEnumWriteChannel+0x1b4>
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	0a 94       	dec	r0
    1fc2:	e2 f7       	brpl	.-8      	; 0x1fbc <DIO_DioEnumWriteChannel+0x1b0>
    1fc4:	80 95       	com	r24
    1fc6:	84 23       	and	r24, r20
    1fc8:	8c 93       	st	X, r24
    1fca:	39 c0       	rjmp	.+114    	; 0x203e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	3e 83       	std	Y+6, r19	; 0x06
    1fd4:	2d 83       	std	Y+5, r18	; 0x05
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	c9 f0       	breq	.+50     	; 0x2010 <DIO_DioEnumWriteChannel+0x204>
    1fde:	2d 81       	ldd	r18, Y+5	; 0x05
    1fe0:	3e 81       	ldd	r19, Y+6	; 0x06
    1fe2:	21 30       	cpi	r18, 0x01	; 1
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	59 f5       	brne	.+86     	; 0x203e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    1fe8:	a2 e3       	ldi	r26, 0x32	; 50
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e2 e3       	ldi	r30, 0x32	; 50
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 2e       	mov	r0, r18
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <DIO_DioEnumWriteChannel+0x1fa>
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	0a 94       	dec	r0
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <DIO_DioEnumWriteChannel+0x1f6>
    200a:	84 2b       	or	r24, r20
    200c:	8c 93       	st	X, r24
    200e:	17 c0       	rjmp	.+46     	; 0x203e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    2010:	a2 e3       	ldi	r26, 0x32	; 50
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e2 e3       	ldi	r30, 0x32	; 50
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	48 2f       	mov	r20, r24
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	02 2e       	mov	r0, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <DIO_DioEnumWriteChannel+0x222>
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	0a 94       	dec	r0
    2030:	e2 f7       	brpl	.-8      	; 0x202a <DIO_DioEnumWriteChannel+0x21e>
    2032:	80 95       	com	r24
    2034:	84 23       	and	r24, r20
    2036:	8c 93       	st	X, r24
    2038:	02 c0       	rjmp	.+4      	; 0x203e <DIO_DioEnumWriteChannel+0x232>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WRITE_NOK;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    203e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2040:	2e 96       	adiw	r28, 0x0e	; 14
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <DIO_DioEnumReadChannel>:

DioEnum DIO_DioEnumReadChannel(u8 copy_u8PortId,u8 copy_u8PinId,pu8 copy_pu8ReadChannel)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	28 97       	sbiw	r28, 0x08	; 8
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	6c 83       	std	Y+4, r22	; 0x04
    206a:	5e 83       	std	Y+6, r21	; 0x06
    206c:	4d 83       	std	Y+5, r20	; 0x05
	DioEnum local_DioEnumErrorState = DIO_READ_OK;
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	8a 83       	std	Y+2, r24	; 0x02
	/* local variable to store in value of the pin */
	u8 local_u8GetValue;
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7) && (copy_pu8ReadChannel != NULL))
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	84 30       	cpi	r24, 0x04	; 4
    2076:	08 f0       	brcs	.+2      	; 0x207a <DIO_DioEnumReadChannel+0x28>
    2078:	9f c0       	rjmp	.+318    	; 0x21b8 <DIO_DioEnumReadChannel+0x166>
    207a:	8c 81       	ldd	r24, Y+4	; 0x04
    207c:	88 30       	cpi	r24, 0x08	; 8
    207e:	08 f0       	brcs	.+2      	; 0x2082 <DIO_DioEnumReadChannel+0x30>
    2080:	9b c0       	rjmp	.+310    	; 0x21b8 <DIO_DioEnumReadChannel+0x166>
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	09 f4       	brne	.+2      	; 0x208c <DIO_DioEnumReadChannel+0x3a>
    208a:	96 c0       	rjmp	.+300    	; 0x21b8 <DIO_DioEnumReadChannel+0x166>
	{
		/* step1: check about which port you want to read */
		switch(copy_u8PortId)
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	38 87       	std	Y+8, r19	; 0x08
    2094:	2f 83       	std	Y+7, r18	; 0x07
    2096:	4f 81       	ldd	r20, Y+7	; 0x07
    2098:	58 85       	ldd	r21, Y+8	; 0x08
    209a:	41 30       	cpi	r20, 0x01	; 1
    209c:	51 05       	cpc	r21, r1
    209e:	a9 f1       	breq	.+106    	; 0x210a <DIO_DioEnumReadChannel+0xb8>
    20a0:	8f 81       	ldd	r24, Y+7	; 0x07
    20a2:	98 85       	ldd	r25, Y+8	; 0x08
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	91 05       	cpc	r25, r1
    20a8:	34 f4       	brge	.+12     	; 0x20b6 <DIO_DioEnumReadChannel+0x64>
    20aa:	2f 81       	ldd	r18, Y+7	; 0x07
    20ac:	38 85       	ldd	r19, Y+8	; 0x08
    20ae:	21 15       	cp	r18, r1
    20b0:	31 05       	cpc	r19, r1
    20b2:	71 f0       	breq	.+28     	; 0x20d0 <DIO_DioEnumReadChannel+0x7e>
    20b4:	83 c0       	rjmp	.+262    	; 0x21bc <DIO_DioEnumReadChannel+0x16a>
    20b6:	4f 81       	ldd	r20, Y+7	; 0x07
    20b8:	58 85       	ldd	r21, Y+8	; 0x08
    20ba:	42 30       	cpi	r20, 0x02	; 2
    20bc:	51 05       	cpc	r21, r1
    20be:	09 f4       	brne	.+2      	; 0x20c2 <DIO_DioEnumReadChannel+0x70>
    20c0:	41 c0       	rjmp	.+130    	; 0x2144 <DIO_DioEnumReadChannel+0xf2>
    20c2:	8f 81       	ldd	r24, Y+7	; 0x07
    20c4:	98 85       	ldd	r25, Y+8	; 0x08
    20c6:	83 30       	cpi	r24, 0x03	; 3
    20c8:	91 05       	cpc	r25, r1
    20ca:	09 f4       	brne	.+2      	; 0x20ce <DIO_DioEnumReadChannel+0x7c>
    20cc:	58 c0       	rjmp	.+176    	; 0x217e <DIO_DioEnumReadChannel+0x12c>
    20ce:	76 c0       	rjmp	.+236    	; 0x21bc <DIO_DioEnumReadChannel+0x16a>
		{
			case DIO_u8_PORTA:  // PORTA
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);
    20d0:	e9 e3       	ldi	r30, 0x39	; 57
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	8c 81       	ldd	r24, Y+4	; 0x04
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	a9 01       	movw	r20, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <DIO_DioEnumReadChannel+0x96>
    20e4:	55 95       	asr	r21
    20e6:	47 95       	ror	r20
    20e8:	8a 95       	dec	r24
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <DIO_DioEnumReadChannel+0x92>
    20ec:	ca 01       	movw	r24, r20
    20ee:	81 70       	andi	r24, 0x01	; 1
    20f0:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	88 23       	and	r24, r24
    20f6:	21 f4       	brne	.+8      	; 0x2100 <DIO_DioEnumReadChannel+0xae>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    20f8:	ed 81       	ldd	r30, Y+5	; 0x05
    20fa:	fe 81       	ldd	r31, Y+6	; 0x06
    20fc:	10 82       	st	Z, r1
    20fe:	5e c0       	rjmp	.+188    	; 0x21bc <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    2100:	ed 81       	ldd	r30, Y+5	; 0x05
    2102:	fe 81       	ldd	r31, Y+6	; 0x06
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	80 83       	st	Z, r24
    2108:	59 c0       	rjmp	.+178    	; 0x21bc <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId);
    210a:	e6 e3       	ldi	r30, 0x36	; 54
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	8c 81       	ldd	r24, Y+4	; 0x04
    2116:	88 2f       	mov	r24, r24
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a9 01       	movw	r20, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <DIO_DioEnumReadChannel+0xd0>
    211e:	55 95       	asr	r21
    2120:	47 95       	ror	r20
    2122:	8a 95       	dec	r24
    2124:	e2 f7       	brpl	.-8      	; 0x211e <DIO_DioEnumReadChannel+0xcc>
    2126:	ca 01       	movw	r24, r20
    2128:	81 70       	andi	r24, 0x01	; 1
    212a:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	88 23       	and	r24, r24
    2130:	21 f4       	brne	.+8      	; 0x213a <DIO_DioEnumReadChannel+0xe8>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    2132:	ed 81       	ldd	r30, Y+5	; 0x05
    2134:	fe 81       	ldd	r31, Y+6	; 0x06
    2136:	10 82       	st	Z, r1
    2138:	41 c0       	rjmp	.+130    	; 0x21bc <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    213a:	ed 81       	ldd	r30, Y+5	; 0x05
    213c:	fe 81       	ldd	r31, Y+6	; 0x06
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	80 83       	st	Z, r24
    2142:	3c c0       	rjmp	.+120    	; 0x21bc <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId);
    2144:	e3 e3       	ldi	r30, 0x33	; 51
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	8c 81       	ldd	r24, Y+4	; 0x04
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a9 01       	movw	r20, r18
    2156:	02 c0       	rjmp	.+4      	; 0x215c <DIO_DioEnumReadChannel+0x10a>
    2158:	55 95       	asr	r21
    215a:	47 95       	ror	r20
    215c:	8a 95       	dec	r24
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <DIO_DioEnumReadChannel+0x106>
    2160:	ca 01       	movw	r24, r20
    2162:	81 70       	andi	r24, 0x01	; 1
    2164:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	88 23       	and	r24, r24
    216a:	21 f4       	brne	.+8      	; 0x2174 <DIO_DioEnumReadChannel+0x122>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    216c:	ed 81       	ldd	r30, Y+5	; 0x05
    216e:	fe 81       	ldd	r31, Y+6	; 0x06
    2170:	10 82       	st	Z, r1
    2172:	24 c0       	rjmp	.+72     	; 0x21bc <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    2174:	ed 81       	ldd	r30, Y+5	; 0x05
    2176:	fe 81       	ldd	r31, Y+6	; 0x06
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	80 83       	st	Z, r24
    217c:	1f c0       	rjmp	.+62     	; 0x21bc <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId);
    217e:	e0 e3       	ldi	r30, 0x30	; 48
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a9 01       	movw	r20, r18
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <DIO_DioEnumReadChannel+0x144>
    2192:	55 95       	asr	r21
    2194:	47 95       	ror	r20
    2196:	8a 95       	dec	r24
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <DIO_DioEnumReadChannel+0x140>
    219a:	ca 01       	movw	r24, r20
    219c:	81 70       	andi	r24, 0x01	; 1
    219e:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	88 23       	and	r24, r24
    21a4:	21 f4       	brne	.+8      	; 0x21ae <DIO_DioEnumReadChannel+0x15c>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    21a6:	ed 81       	ldd	r30, Y+5	; 0x05
    21a8:	fe 81       	ldd	r31, Y+6	; 0x06
    21aa:	10 82       	st	Z, r1
    21ac:	07 c0       	rjmp	.+14     	; 0x21bc <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    21ae:	ed 81       	ldd	r30, Y+5	; 0x05
    21b0:	fe 81       	ldd	r31, Y+6	; 0x06
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	80 83       	st	Z, r24
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <DIO_DioEnumReadChannel+0x16a>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_READ_NOK;
    21b8:	83 e0       	ldi	r24, 0x03	; 3
    21ba:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_DioEnumErrorState;
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    21be:	28 96       	adiw	r28, 0x08	; 8
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <DIO_DioEnumWritePort>:

DioEnum DIO_DioEnumWritePort(u8 copy_u8PortId,u8 copy_u8Value)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <DIO_DioEnumWritePort+0x6>
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <DIO_DioEnumWritePort+0x8>
    21d8:	0f 92       	push	r0
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	8a 83       	std	Y+2, r24	; 0x02
    21e0:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_WPORT_OK;
    21e2:	84 e0       	ldi	r24, 0x04	; 4
    21e4:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if(copy_u8PortId <= DIO_u8_PORTD)
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	84 30       	cpi	r24, 0x04	; 4
    21ea:	98 f5       	brcc	.+102    	; 0x2252 <DIO_DioEnumWritePort+0x82>
	{
		/* check about which port you want to write into the value */
		switch(copy_u8PortId)
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	3d 83       	std	Y+5, r19	; 0x05
    21f4:	2c 83       	std	Y+4, r18	; 0x04
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	9d 81       	ldd	r25, Y+5	; 0x05
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	91 05       	cpc	r25, r1
    21fe:	d1 f0       	breq	.+52     	; 0x2234 <DIO_DioEnumWritePort+0x64>
    2200:	2c 81       	ldd	r18, Y+4	; 0x04
    2202:	3d 81       	ldd	r19, Y+5	; 0x05
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	2c f4       	brge	.+10     	; 0x2214 <DIO_DioEnumWritePort+0x44>
    220a:	8c 81       	ldd	r24, Y+4	; 0x04
    220c:	9d 81       	ldd	r25, Y+5	; 0x05
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	61 f0       	breq	.+24     	; 0x222a <DIO_DioEnumWritePort+0x5a>
    2212:	21 c0       	rjmp	.+66     	; 0x2256 <DIO_DioEnumWritePort+0x86>
    2214:	2c 81       	ldd	r18, Y+4	; 0x04
    2216:	3d 81       	ldd	r19, Y+5	; 0x05
    2218:	22 30       	cpi	r18, 0x02	; 2
    221a:	31 05       	cpc	r19, r1
    221c:	81 f0       	breq	.+32     	; 0x223e <DIO_DioEnumWritePort+0x6e>
    221e:	8c 81       	ldd	r24, Y+4	; 0x04
    2220:	9d 81       	ldd	r25, Y+5	; 0x05
    2222:	83 30       	cpi	r24, 0x03	; 3
    2224:	91 05       	cpc	r25, r1
    2226:	81 f0       	breq	.+32     	; 0x2248 <DIO_DioEnumWritePort+0x78>
    2228:	16 c0       	rjmp	.+44     	; 0x2256 <DIO_DioEnumWritePort+0x86>
		{
			case DIO_u8_PORTA: DIO_u8_PORTA_REG = copy_u8Value;      break;
    222a:	eb e3       	ldi	r30, 0x3B	; 59
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	80 83       	st	Z, r24
    2232:	11 c0       	rjmp	.+34     	; 0x2256 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTB: DIO_u8_PORTB_REG = copy_u8Value;      break;
    2234:	e8 e3       	ldi	r30, 0x38	; 56
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	80 83       	st	Z, r24
    223c:	0c c0       	rjmp	.+24     	; 0x2256 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTC: DIO_u8_PORTC_REG = copy_u8Value;      break;
    223e:	e5 e3       	ldi	r30, 0x35	; 53
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	80 83       	st	Z, r24
    2246:	07 c0       	rjmp	.+14     	; 0x2256 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTD: DIO_u8_PORTD_REG = copy_u8Value;      break;
    2248:	e2 e3       	ldi	r30, 0x32	; 50
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	80 83       	st	Z, r24
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <DIO_DioEnumWritePort+0x86>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WPORT_NOK;
    2252:	85 e0       	ldi	r24, 0x05	; 5
    2254:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    2256:	89 81       	ldd	r24, Y+1	; 0x01
}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <DIO_DioEnumReadPort>:

DioEnum DIO_DioEnumReadPort(u8 copy_u8PortId,pu8 copy_pu8ReadPort)
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	00 d0       	rcall	.+0      	; 0x226e <DIO_DioEnumReadPort+0x6>
    226e:	00 d0       	rcall	.+0      	; 0x2270 <DIO_DioEnumReadPort+0x8>
    2270:	00 d0       	rcall	.+0      	; 0x2272 <DIO_DioEnumReadPort+0xa>
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	8a 83       	std	Y+2, r24	; 0x02
    2278:	7c 83       	std	Y+4, r23	; 0x04
    227a:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_RPORT_OK;
    227c:	86 e0       	ldi	r24, 0x06	; 6
    227e:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_pu8ReadPort != NULL))
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	84 30       	cpi	r24, 0x04	; 4
    2284:	08 f0       	brcs	.+2      	; 0x2288 <DIO_DioEnumReadPort+0x20>
    2286:	3f c0       	rjmp	.+126    	; 0x2306 <DIO_DioEnumReadPort+0x9e>
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	d9 f1       	breq	.+118    	; 0x2306 <DIO_DioEnumReadPort+0x9e>
	{
		/* check about which port you want to read this value */
		switch(copy_u8PortId)
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	3e 83       	std	Y+6, r19	; 0x06
    2298:	2d 83       	std	Y+5, r18	; 0x05
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	81 30       	cpi	r24, 0x01	; 1
    22a0:	91 05       	cpc	r25, r1
    22a2:	e1 f0       	breq	.+56     	; 0x22dc <DIO_DioEnumReadPort+0x74>
    22a4:	2d 81       	ldd	r18, Y+5	; 0x05
    22a6:	3e 81       	ldd	r19, Y+6	; 0x06
    22a8:	22 30       	cpi	r18, 0x02	; 2
    22aa:	31 05       	cpc	r19, r1
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <DIO_DioEnumReadPort+0x50>
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	61 f0       	breq	.+24     	; 0x22ce <DIO_DioEnumReadPort+0x66>
    22b6:	29 c0       	rjmp	.+82     	; 0x230a <DIO_DioEnumReadPort+0xa2>
    22b8:	2d 81       	ldd	r18, Y+5	; 0x05
    22ba:	3e 81       	ldd	r19, Y+6	; 0x06
    22bc:	22 30       	cpi	r18, 0x02	; 2
    22be:	31 05       	cpc	r19, r1
    22c0:	a1 f0       	breq	.+40     	; 0x22ea <DIO_DioEnumReadPort+0x82>
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	83 30       	cpi	r24, 0x03	; 3
    22c8:	91 05       	cpc	r25, r1
    22ca:	b1 f0       	breq	.+44     	; 0x22f8 <DIO_DioEnumReadPort+0x90>
    22cc:	1e c0       	rjmp	.+60     	; 0x230a <DIO_DioEnumReadPort+0xa2>
		{
			case DIO_u8_PORTA: *copy_pu8ReadPort = DIO_u8_PINA_REG;      break;
    22ce:	e9 e3       	ldi	r30, 0x39	; 57
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	eb 81       	ldd	r30, Y+3	; 0x03
    22d6:	fc 81       	ldd	r31, Y+4	; 0x04
    22d8:	80 83       	st	Z, r24
    22da:	17 c0       	rjmp	.+46     	; 0x230a <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTB: *copy_pu8ReadPort = DIO_u8_PINB_REG;      break;
    22dc:	e6 e3       	ldi	r30, 0x36	; 54
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	eb 81       	ldd	r30, Y+3	; 0x03
    22e4:	fc 81       	ldd	r31, Y+4	; 0x04
    22e6:	80 83       	st	Z, r24
    22e8:	10 c0       	rjmp	.+32     	; 0x230a <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTC: *copy_pu8ReadPort = DIO_u8_PINC_REG;      break;
    22ea:	e3 e3       	ldi	r30, 0x33	; 51
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	eb 81       	ldd	r30, Y+3	; 0x03
    22f2:	fc 81       	ldd	r31, Y+4	; 0x04
    22f4:	80 83       	st	Z, r24
    22f6:	09 c0       	rjmp	.+18     	; 0x230a <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTD: *copy_pu8ReadPort = DIO_u8_PIND_REG;      break;
    22f8:	e0 e3       	ldi	r30, 0x30	; 48
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2300:	fc 81       	ldd	r31, Y+4	; 0x04
    2302:	80 83       	st	Z, r24
    2304:	02 c0       	rjmp	.+4      	; 0x230a <DIO_DioEnumReadPort+0xa2>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_RPORT_NOK;
    2306:	87 e0       	ldi	r24, 0x07	; 7
    2308:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    230a:	89 81       	ldd	r24, Y+1	; 0x01
}
    230c:	26 96       	adiw	r28, 0x06	; 6
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <DIO_DioEnumFlibChannel>:

DioEnum DIO_DioEnumFlibChannel(u8 copy_u8PortId,u8 copy_u8PinId)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	00 d0       	rcall	.+0      	; 0x2324 <DIO_DioEnumFlibChannel+0x6>
    2324:	00 d0       	rcall	.+0      	; 0x2326 <DIO_DioEnumFlibChannel+0x8>
    2326:	0f 92       	push	r0
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	8a 83       	std	Y+2, r24	; 0x02
    232e:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_FLIB_OK;
    2330:	88 e0       	ldi	r24, 0x08	; 8
    2332:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	84 30       	cpi	r24, 0x04	; 4
    2338:	08 f0       	brcs	.+2      	; 0x233c <DIO_DioEnumFlibChannel+0x1e>
    233a:	73 c0       	rjmp	.+230    	; 0x2422 <DIO_DioEnumFlibChannel+0x104>
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	88 30       	cpi	r24, 0x08	; 8
    2340:	08 f0       	brcs	.+2      	; 0x2344 <DIO_DioEnumFlibChannel+0x26>
    2342:	6f c0       	rjmp	.+222    	; 0x2422 <DIO_DioEnumFlibChannel+0x104>
	{
		/* check about which port you want to TGLgle your pins */
		switch(copy_u8PortId)
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	3d 83       	std	Y+5, r19	; 0x05
    234c:	2c 83       	std	Y+4, r18	; 0x04
    234e:	8c 81       	ldd	r24, Y+4	; 0x04
    2350:	9d 81       	ldd	r25, Y+5	; 0x05
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	91 05       	cpc	r25, r1
    2356:	49 f1       	breq	.+82     	; 0x23aa <DIO_DioEnumFlibChannel+0x8c>
    2358:	2c 81       	ldd	r18, Y+4	; 0x04
    235a:	3d 81       	ldd	r19, Y+5	; 0x05
    235c:	22 30       	cpi	r18, 0x02	; 2
    235e:	31 05       	cpc	r19, r1
    2360:	2c f4       	brge	.+10     	; 0x236c <DIO_DioEnumFlibChannel+0x4e>
    2362:	8c 81       	ldd	r24, Y+4	; 0x04
    2364:	9d 81       	ldd	r25, Y+5	; 0x05
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	61 f0       	breq	.+24     	; 0x2382 <DIO_DioEnumFlibChannel+0x64>
    236a:	5d c0       	rjmp	.+186    	; 0x2426 <DIO_DioEnumFlibChannel+0x108>
    236c:	2c 81       	ldd	r18, Y+4	; 0x04
    236e:	3d 81       	ldd	r19, Y+5	; 0x05
    2370:	22 30       	cpi	r18, 0x02	; 2
    2372:	31 05       	cpc	r19, r1
    2374:	71 f1       	breq	.+92     	; 0x23d2 <DIO_DioEnumFlibChannel+0xb4>
    2376:	8c 81       	ldd	r24, Y+4	; 0x04
    2378:	9d 81       	ldd	r25, Y+5	; 0x05
    237a:	83 30       	cpi	r24, 0x03	; 3
    237c:	91 05       	cpc	r25, r1
    237e:	e9 f1       	breq	.+122    	; 0x23fa <DIO_DioEnumFlibChannel+0xdc>
    2380:	52 c0       	rjmp	.+164    	; 0x2426 <DIO_DioEnumFlibChannel+0x108>
		{
			case DIO_u8_PORTA: TGL_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    2382:	ab e3       	ldi	r26, 0x3B	; 59
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	eb e3       	ldi	r30, 0x3B	; 59
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	48 2f       	mov	r20, r24
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	02 2e       	mov	r0, r18
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <DIO_DioEnumFlibChannel+0x82>
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	0a 94       	dec	r0
    23a2:	e2 f7       	brpl	.-8      	; 0x239c <DIO_DioEnumFlibChannel+0x7e>
    23a4:	84 27       	eor	r24, r20
    23a6:	8c 93       	st	X, r24
    23a8:	3e c0       	rjmp	.+124    	; 0x2426 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTB: TGL_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    23aa:	ab e3       	ldi	r26, 0x3B	; 59
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	eb e3       	ldi	r30, 0x3B	; 59
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	48 2f       	mov	r20, r24
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	02 2e       	mov	r0, r18
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <DIO_DioEnumFlibChannel+0xaa>
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	0a 94       	dec	r0
    23ca:	e2 f7       	brpl	.-8      	; 0x23c4 <DIO_DioEnumFlibChannel+0xa6>
    23cc:	84 27       	eor	r24, r20
    23ce:	8c 93       	st	X, r24
    23d0:	2a c0       	rjmp	.+84     	; 0x2426 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTC: TGL_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    23d2:	ab e3       	ldi	r26, 0x3B	; 59
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	eb e3       	ldi	r30, 0x3B	; 59
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	48 2f       	mov	r20, r24
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	02 2e       	mov	r0, r18
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <DIO_DioEnumFlibChannel+0xd2>
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	0a 94       	dec	r0
    23f2:	e2 f7       	brpl	.-8      	; 0x23ec <DIO_DioEnumFlibChannel+0xce>
    23f4:	84 27       	eor	r24, r20
    23f6:	8c 93       	st	X, r24
    23f8:	16 c0       	rjmp	.+44     	; 0x2426 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTD: TGL_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    23fa:	ab e3       	ldi	r26, 0x3B	; 59
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	eb e3       	ldi	r30, 0x3B	; 59
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	48 2f       	mov	r20, r24
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	02 2e       	mov	r0, r18
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <DIO_DioEnumFlibChannel+0xfa>
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	0a 94       	dec	r0
    241a:	e2 f7       	brpl	.-8      	; 0x2414 <DIO_DioEnumFlibChannel+0xf6>
    241c:	84 27       	eor	r24, r20
    241e:	8c 93       	st	X, r24
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <DIO_DioEnumFlibChannel+0x108>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_FLIB_NOK;
    2422:	89 e0       	ldi	r24, 0x09	; 9
    2424:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    2426:	89 81       	ldd	r24, Y+1	; 0x01
}
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <ADC_init>:
 */ 
#include "../../../LIB/Include/Std_types.h"
#include "../../../LIB/Include/Bit_utils.h"
#include "../Include/MemMap.h"
#include "../Include/ADC.h"
void ADC_init(ADC_VoltRef_type REF,ADC_Prescaler_type prescaler){
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <ADC_init+0x6>
    243e:	00 d0       	rcall	.+0      	; 0x2440 <ADC_init+0x8>
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(REF)
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	3c 83       	std	Y+4, r19	; 0x04
    2450:	2b 83       	std	Y+3, r18	; 0x03
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	9c 81       	ldd	r25, Y+4	; 0x04
    2456:	81 30       	cpi	r24, 0x01	; 1
    2458:	91 05       	cpc	r25, r1
    245a:	c1 f0       	breq	.+48     	; 0x248c <ADC_init+0x54>
    245c:	2b 81       	ldd	r18, Y+3	; 0x03
    245e:	3c 81       	ldd	r19, Y+4	; 0x04
    2460:	22 30       	cpi	r18, 0x02	; 2
    2462:	31 05       	cpc	r19, r1
    2464:	11 f1       	breq	.+68     	; 0x24aa <ADC_init+0x72>
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	61 f5       	brne	.+88     	; 0x24c6 <ADC_init+0x8e>
	{
		case VREF_AREF:
		CLR_BIT(ADMUX,REFS0);
    246e:	a7 e2       	ldi	r26, 0x27	; 39
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e7 e2       	ldi	r30, 0x27	; 39
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	8f 7b       	andi	r24, 0xBF	; 191
    247a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    247c:	a7 e2       	ldi	r26, 0x27	; 39
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e7 e2       	ldi	r30, 0x27	; 39
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	8f 77       	andi	r24, 0x7F	; 127
    2488:	8c 93       	st	X, r24
    248a:	1d c0       	rjmp	.+58     	; 0x24c6 <ADC_init+0x8e>
		break;
		case VREF_AVCC:
		SET_BIT(ADMUX,REFS0);
    248c:	a7 e2       	ldi	r26, 0x27	; 39
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e7 e2       	ldi	r30, 0x27	; 39
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	80 64       	ori	r24, 0x40	; 64
    2498:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    249a:	a7 e2       	ldi	r26, 0x27	; 39
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e7 e2       	ldi	r30, 0x27	; 39
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	8f 77       	andi	r24, 0x7F	; 127
    24a6:	8c 93       	st	X, r24
    24a8:	0e c0       	rjmp	.+28     	; 0x24c6 <ADC_init+0x8e>
		break;
		case VREF_256V:
		SET_BIT(ADMUX,REFS0);
    24aa:	a7 e2       	ldi	r26, 0x27	; 39
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e7 e2       	ldi	r30, 0x27	; 39
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	80 64       	ori	r24, 0x40	; 64
    24b6:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS1);
    24b8:	a7 e2       	ldi	r26, 0x27	; 39
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e7 e2       	ldi	r30, 0x27	; 39
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	80 68       	ori	r24, 0x80	; 128
    24c4:	8c 93       	st	X, r24
		break;
	}
	
	ADCSRA=prescaler;
    24c6:	e6 e2       	ldi	r30, 0x26	; 38
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	80 83       	st	Z, r24

	SET_BIT(ADCSRA,ADEN); //adc enable 
    24ce:	a6 e2       	ldi	r26, 0x26	; 38
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e6 e2       	ldi	r30, 0x26	; 38
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	80 68       	ori	r24, 0x80	; 128
    24da:	8c 93       	st	X, r24

	
}
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <ADC_Read>:
u16 ADC_Read(ADC_CH copy_u8pin){
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	0f 92       	push	r0
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=ADMUX|copy_u8pin;
    24f6:	a7 e2       	ldi	r26, 0x27	; 39
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e7 e2       	ldi	r30, 0x27	; 39
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	90 81       	ld	r25, Z
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	89 2b       	or	r24, r25
    2504:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC); // start conversion 
    2506:	a6 e2       	ldi	r26, 0x26	; 38
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e6 e2       	ldi	r30, 0x26	; 38
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	80 64       	ori	r24, 0x40	; 64
    2512:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA,ADSC)); //ADSC will read as one as long as a conversion is in progress. When the conversion is complete, it returns to zero. Writing zero to this bit has no effect.
    2514:	e6 e2       	ldi	r30, 0x26	; 38
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	82 95       	swap	r24
    251c:	86 95       	lsr	r24
    251e:	86 95       	lsr	r24
    2520:	83 70       	andi	r24, 0x03	; 3
    2522:	88 2f       	mov	r24, r24
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	81 70       	andi	r24, 0x01	; 1
    2528:	90 70       	andi	r25, 0x00	; 0
    252a:	88 23       	and	r24, r24
    252c:	99 f7       	brne	.-26     	; 0x2514 <ADC_Read+0x2a>
	
	return (ADC/2);
    252e:	e4 e2       	ldi	r30, 0x24	; 36
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	96 95       	lsr	r25
    2538:	87 95       	ror	r24
	
}
    253a:	0f 90       	pop	r0
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <ADC_disable>:

void ADC_disable(void){
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
	ADCSRA=0X00;	
    254a:	e6 e2       	ldi	r30, 0x26	; 38
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	10 82       	st	Z, r1
 }
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <LCD_voidInit>:
#include "../Include/LCD_config.h"
#define F_CPU    8000000UL
#include <util/delay.h>

void LCD_voidInit(void)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	e8 97       	sbiw	r28, 0x38	; 56
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	a8 e4       	ldi	r26, 0x48	; 72
    2570:	b2 e4       	ldi	r27, 0x42	; 66
    2572:	8d ab       	std	Y+53, r24	; 0x35
    2574:	9e ab       	std	Y+54, r25	; 0x36
    2576:	af ab       	std	Y+55, r26	; 0x37
    2578:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257a:	6d a9       	ldd	r22, Y+53	; 0x35
    257c:	7e a9       	ldd	r23, Y+54	; 0x36
    257e:	8f a9       	ldd	r24, Y+55	; 0x37
    2580:	98 ad       	ldd	r25, Y+56	; 0x38
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	4a ef       	ldi	r20, 0xFA	; 250
    2588:	54 e4       	ldi	r21, 0x44	; 68
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	89 ab       	std	Y+49, r24	; 0x31
    2594:	9a ab       	std	Y+50, r25	; 0x32
    2596:	ab ab       	std	Y+51, r26	; 0x33
    2598:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    259a:	69 a9       	ldd	r22, Y+49	; 0x31
    259c:	7a a9       	ldd	r23, Y+50	; 0x32
    259e:	8b a9       	ldd	r24, Y+51	; 0x33
    25a0:	9c a9       	ldd	r25, Y+52	; 0x34
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e8       	ldi	r20, 0x80	; 128
    25a8:	5f e3       	ldi	r21, 0x3F	; 63
    25aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ae:	88 23       	and	r24, r24
    25b0:	2c f4       	brge	.+10     	; 0x25bc <LCD_voidInit+0x66>
		__ticks = 1;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	98 ab       	std	Y+48, r25	; 0x30
    25b8:	8f a7       	std	Y+47, r24	; 0x2f
    25ba:	3f c0       	rjmp	.+126    	; 0x263a <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    25bc:	69 a9       	ldd	r22, Y+49	; 0x31
    25be:	7a a9       	ldd	r23, Y+50	; 0x32
    25c0:	8b a9       	ldd	r24, Y+51	; 0x33
    25c2:	9c a9       	ldd	r25, Y+52	; 0x34
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	3f ef       	ldi	r19, 0xFF	; 255
    25c8:	4f e7       	ldi	r20, 0x7F	; 127
    25ca:	57 e4       	ldi	r21, 0x47	; 71
    25cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d0:	18 16       	cp	r1, r24
    25d2:	4c f5       	brge	.+82     	; 0x2626 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d4:	6d a9       	ldd	r22, Y+53	; 0x35
    25d6:	7e a9       	ldd	r23, Y+54	; 0x36
    25d8:	8f a9       	ldd	r24, Y+55	; 0x37
    25da:	98 ad       	ldd	r25, Y+56	; 0x38
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e2       	ldi	r20, 0x20	; 32
    25e2:	51 e4       	ldi	r21, 0x41	; 65
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	98 ab       	std	Y+48, r25	; 0x30
    25fa:	8f a7       	std	Y+47, r24	; 0x2f
    25fc:	0f c0       	rjmp	.+30     	; 0x261c <LCD_voidInit+0xc6>
    25fe:	88 ec       	ldi	r24, 0xC8	; 200
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9e a7       	std	Y+46, r25	; 0x2e
    2604:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2606:	8d a5       	ldd	r24, Y+45	; 0x2d
    2608:	9e a5       	ldd	r25, Y+46	; 0x2e
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <LCD_voidInit+0xb4>
    260e:	9e a7       	std	Y+46, r25	; 0x2e
    2610:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2612:	8f a5       	ldd	r24, Y+47	; 0x2f
    2614:	98 a9       	ldd	r25, Y+48	; 0x30
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	98 ab       	std	Y+48, r25	; 0x30
    261a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261c:	8f a5       	ldd	r24, Y+47	; 0x2f
    261e:	98 a9       	ldd	r25, Y+48	; 0x30
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	69 f7       	brne	.-38     	; 0x25fe <LCD_voidInit+0xa8>
    2624:	14 c0       	rjmp	.+40     	; 0x264e <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2626:	69 a9       	ldd	r22, Y+49	; 0x31
    2628:	7a a9       	ldd	r23, Y+50	; 0x32
    262a:	8b a9       	ldd	r24, Y+51	; 0x33
    262c:	9c a9       	ldd	r25, Y+52	; 0x34
    262e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	98 ab       	std	Y+48, r25	; 0x30
    2638:	8f a7       	std	Y+47, r24	; 0x2f
    263a:	8f a5       	ldd	r24, Y+47	; 0x2f
    263c:	98 a9       	ldd	r25, Y+48	; 0x30
    263e:	9c a7       	std	Y+44, r25	; 0x2c
    2640:	8b a7       	std	Y+43, r24	; 0x2b
    2642:	8b a5       	ldd	r24, Y+43	; 0x2b
    2644:	9c a5       	ldd	r25, Y+44	; 0x2c
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <LCD_voidInit+0xf0>
    264a:	9c a7       	std	Y+44, r25	; 0x2c
    264c:	8b a7       	std	Y+43, r24	; 0x2b
    /* delay more than 30 msec */
    _delay_ms(50);
    LCD_voidSendCommand(LCD_u8_CURSOR_HOME);
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_voidSendCommand>
    #if   LCD_u8_MODE == LCD_u8_MODE_8_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_8B_Mode);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_4B_Mode);
    2654:	88 e2       	ldi	r24, 0x28	; 40
    2656:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_voidSendCommand>
    #endif 
    /* display clear => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CLEAR);
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_voidSendCommand>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	a0 e8       	ldi	r26, 0x80	; 128
    2666:	b0 e4       	ldi	r27, 0x40	; 64
    2668:	8f a3       	std	Y+39, r24	; 0x27
    266a:	98 a7       	std	Y+40, r25	; 0x28
    266c:	a9 a7       	std	Y+41, r26	; 0x29
    266e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2670:	6f a1       	ldd	r22, Y+39	; 0x27
    2672:	78 a5       	ldd	r23, Y+40	; 0x28
    2674:	89 a5       	ldd	r24, Y+41	; 0x29
    2676:	9a a5       	ldd	r25, Y+42	; 0x2a
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	4a ef       	ldi	r20, 0xFA	; 250
    267e:	54 e4       	ldi	r21, 0x44	; 68
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	8b a3       	std	Y+35, r24	; 0x23
    268a:	9c a3       	std	Y+36, r25	; 0x24
    268c:	ad a3       	std	Y+37, r26	; 0x25
    268e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2690:	6b a1       	ldd	r22, Y+35	; 0x23
    2692:	7c a1       	ldd	r23, Y+36	; 0x24
    2694:	8d a1       	ldd	r24, Y+37	; 0x25
    2696:	9e a1       	ldd	r25, Y+38	; 0x26
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e8       	ldi	r20, 0x80	; 128
    269e:	5f e3       	ldi	r21, 0x3F	; 63
    26a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a4:	88 23       	and	r24, r24
    26a6:	2c f4       	brge	.+10     	; 0x26b2 <LCD_voidInit+0x15c>
		__ticks = 1;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	9a a3       	std	Y+34, r25	; 0x22
    26ae:	89 a3       	std	Y+33, r24	; 0x21
    26b0:	3f c0       	rjmp	.+126    	; 0x2730 <LCD_voidInit+0x1da>
	else if (__tmp > 65535)
    26b2:	6b a1       	ldd	r22, Y+35	; 0x23
    26b4:	7c a1       	ldd	r23, Y+36	; 0x24
    26b6:	8d a1       	ldd	r24, Y+37	; 0x25
    26b8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	3f ef       	ldi	r19, 0xFF	; 255
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	57 e4       	ldi	r21, 0x47	; 71
    26c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	4c f5       	brge	.+82     	; 0x271c <LCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ca:	6f a1       	ldd	r22, Y+39	; 0x27
    26cc:	78 a5       	ldd	r23, Y+40	; 0x28
    26ce:	89 a5       	ldd	r24, Y+41	; 0x29
    26d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e2       	ldi	r20, 0x20	; 32
    26d8:	51 e4       	ldi	r21, 0x41	; 65
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	bc 01       	movw	r22, r24
    26e4:	cd 01       	movw	r24, r26
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9a a3       	std	Y+34, r25	; 0x22
    26f0:	89 a3       	std	Y+33, r24	; 0x21
    26f2:	0f c0       	rjmp	.+30     	; 0x2712 <LCD_voidInit+0x1bc>
    26f4:	88 ec       	ldi	r24, 0xC8	; 200
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	98 a3       	std	Y+32, r25	; 0x20
    26fa:	8f 8f       	std	Y+31, r24	; 0x1f
    26fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26fe:	98 a1       	ldd	r25, Y+32	; 0x20
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_voidInit+0x1aa>
    2704:	98 a3       	std	Y+32, r25	; 0x20
    2706:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	89 a1       	ldd	r24, Y+33	; 0x21
    270a:	9a a1       	ldd	r25, Y+34	; 0x22
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	9a a3       	std	Y+34, r25	; 0x22
    2710:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2712:	89 a1       	ldd	r24, Y+33	; 0x21
    2714:	9a a1       	ldd	r25, Y+34	; 0x22
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	69 f7       	brne	.-38     	; 0x26f4 <LCD_voidInit+0x19e>
    271a:	14 c0       	rjmp	.+40     	; 0x2744 <LCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271c:	6b a1       	ldd	r22, Y+35	; 0x23
    271e:	7c a1       	ldd	r23, Y+36	; 0x24
    2720:	8d a1       	ldd	r24, Y+37	; 0x25
    2722:	9e a1       	ldd	r25, Y+38	; 0x26
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9a a3       	std	Y+34, r25	; 0x22
    272e:	89 a3       	std	Y+33, r24	; 0x21
    2730:	89 a1       	ldd	r24, Y+33	; 0x21
    2732:	9a a1       	ldd	r25, Y+34	; 0x22
    2734:	9e 8f       	std	Y+30, r25	; 0x1e
    2736:	8d 8f       	std	Y+29, r24	; 0x1d
    2738:	8d 8d       	ldd	r24, Y+29	; 0x1d
    273a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <LCD_voidInit+0x1e6>
    2740:	9e 8f       	std	Y+30, r25	; 0x1e
    2742:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(4);
    /* entry mode => call send_command func */
    LCD_voidSendCommand(LCD_u8_ENTRY_Mode);
    2744:	86 e0       	ldi	r24, 0x06	; 6
    2746:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_voidSendCommand>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	a0 e8       	ldi	r26, 0x80	; 128
    2750:	bf e3       	ldi	r27, 0x3F	; 63
    2752:	89 8f       	std	Y+25, r24	; 0x19
    2754:	9a 8f       	std	Y+26, r25	; 0x1a
    2756:	ab 8f       	std	Y+27, r26	; 0x1b
    2758:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275a:	69 8d       	ldd	r22, Y+25	; 0x19
    275c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    275e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	4a ef       	ldi	r20, 0xFA	; 250
    2768:	54 e4       	ldi	r21, 0x44	; 68
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	8d 8b       	std	Y+21, r24	; 0x15
    2774:	9e 8b       	std	Y+22, r25	; 0x16
    2776:	af 8b       	std	Y+23, r26	; 0x17
    2778:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    277a:	6d 89       	ldd	r22, Y+21	; 0x15
    277c:	7e 89       	ldd	r23, Y+22	; 0x16
    277e:	8f 89       	ldd	r24, Y+23	; 0x17
    2780:	98 8d       	ldd	r25, Y+24	; 0x18
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e8       	ldi	r20, 0x80	; 128
    2788:	5f e3       	ldi	r21, 0x3F	; 63
    278a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278e:	88 23       	and	r24, r24
    2790:	2c f4       	brge	.+10     	; 0x279c <LCD_voidInit+0x246>
		__ticks = 1;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	9c 8b       	std	Y+20, r25	; 0x14
    2798:	8b 8b       	std	Y+19, r24	; 0x13
    279a:	3f c0       	rjmp	.+126    	; 0x281a <LCD_voidInit+0x2c4>
	else if (__tmp > 65535)
    279c:	6d 89       	ldd	r22, Y+21	; 0x15
    279e:	7e 89       	ldd	r23, Y+22	; 0x16
    27a0:	8f 89       	ldd	r24, Y+23	; 0x17
    27a2:	98 8d       	ldd	r25, Y+24	; 0x18
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	3f ef       	ldi	r19, 0xFF	; 255
    27a8:	4f e7       	ldi	r20, 0x7F	; 127
    27aa:	57 e4       	ldi	r21, 0x47	; 71
    27ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b0:	18 16       	cp	r1, r24
    27b2:	4c f5       	brge	.+82     	; 0x2806 <LCD_voidInit+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b4:	69 8d       	ldd	r22, Y+25	; 0x19
    27b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e2       	ldi	r20, 0x20	; 32
    27c2:	51 e4       	ldi	r21, 0x41	; 65
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	9c 8b       	std	Y+20, r25	; 0x14
    27da:	8b 8b       	std	Y+19, r24	; 0x13
    27dc:	0f c0       	rjmp	.+30     	; 0x27fc <LCD_voidInit+0x2a6>
    27de:	88 ec       	ldi	r24, 0xC8	; 200
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9a 8b       	std	Y+18, r25	; 0x12
    27e4:	89 8b       	std	Y+17, r24	; 0x11
    27e6:	89 89       	ldd	r24, Y+17	; 0x11
    27e8:	9a 89       	ldd	r25, Y+18	; 0x12
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_voidInit+0x294>
    27ee:	9a 8b       	std	Y+18, r25	; 0x12
    27f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f2:	8b 89       	ldd	r24, Y+19	; 0x13
    27f4:	9c 89       	ldd	r25, Y+20	; 0x14
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	9c 8b       	std	Y+20, r25	; 0x14
    27fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fc:	8b 89       	ldd	r24, Y+19	; 0x13
    27fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	69 f7       	brne	.-38     	; 0x27de <LCD_voidInit+0x288>
    2804:	14 c0       	rjmp	.+40     	; 0x282e <LCD_voidInit+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2806:	6d 89       	ldd	r22, Y+21	; 0x15
    2808:	7e 89       	ldd	r23, Y+22	; 0x16
    280a:	8f 89       	ldd	r24, Y+23	; 0x17
    280c:	98 8d       	ldd	r25, Y+24	; 0x18
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9c 8b       	std	Y+20, r25	; 0x14
    2818:	8b 8b       	std	Y+19, r24	; 0x13
    281a:	8b 89       	ldd	r24, Y+19	; 0x13
    281c:	9c 89       	ldd	r25, Y+20	; 0x14
    281e:	98 8b       	std	Y+16, r25	; 0x10
    2820:	8f 87       	std	Y+15, r24	; 0x0f
    2822:	8f 85       	ldd	r24, Y+15	; 0x0f
    2824:	98 89       	ldd	r25, Y+16	; 0x10
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <LCD_voidInit+0x2d0>
    282a:	98 8b       	std	Y+16, r25	; 0x10
    282c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);  
    /* display uursor on/off control => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CURSOR_ON);
    282e:	8c e0       	ldi	r24, 0x0C	; 12
    2830:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_voidSendCommand>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e8       	ldi	r26, 0x80	; 128
    283a:	bf e3       	ldi	r27, 0x3F	; 63
    283c:	8b 87       	std	Y+11, r24	; 0x0b
    283e:	9c 87       	std	Y+12, r25	; 0x0c
    2840:	ad 87       	std	Y+13, r26	; 0x0d
    2842:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	6b 85       	ldd	r22, Y+11	; 0x0b
    2846:	7c 85       	ldd	r23, Y+12	; 0x0c
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a ef       	ldi	r20, 0xFA	; 250
    2852:	54 e4       	ldi	r21, 0x44	; 68
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	8f 83       	std	Y+7, r24	; 0x07
    285e:	98 87       	std	Y+8, r25	; 0x08
    2860:	a9 87       	std	Y+9, r26	; 0x09
    2862:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2864:	6f 81       	ldd	r22, Y+7	; 0x07
    2866:	78 85       	ldd	r23, Y+8	; 0x08
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	9a 85       	ldd	r25, Y+10	; 0x0a
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <LCD_voidInit+0x330>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <LCD_voidInit+0x3ae>
	else if (__tmp > 65535)
    2886:	6f 81       	ldd	r22, Y+7	; 0x07
    2888:	78 85       	ldd	r23, Y+8	; 0x08
    288a:	89 85       	ldd	r24, Y+9	; 0x09
    288c:	9a 85       	ldd	r25, Y+10	; 0x0a
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <LCD_voidInit+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <LCD_voidInit+0x390>
    28c8:	88 ec       	ldi	r24, 0xC8	; 200
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9c 83       	std	Y+4, r25	; 0x04
    28ce:	8b 83       	std	Y+3, r24	; 0x03
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	9c 81       	ldd	r25, Y+4	; 0x04
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <LCD_voidInit+0x37e>
    28d8:	9c 83       	std	Y+4, r25	; 0x04
    28da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	9e 83       	std	Y+6, r25	; 0x06
    28e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <LCD_voidInit+0x372>
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <LCD_voidInit+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	6f 81       	ldd	r22, Y+7	; 0x07
    28f2:	78 85       	ldd	r23, Y+8	; 0x08
    28f4:	89 85       	ldd	r24, Y+9	; 0x09
    28f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	8d 83       	std	Y+5, r24	; 0x05
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	9e 81       	ldd	r25, Y+6	; 0x06
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	9a 81       	ldd	r25, Y+2	; 0x02
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_voidInit+0x3ba>
    2914:	9a 83       	std	Y+2, r25	; 0x02
    2916:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);  
}
    2918:	e8 96       	adiw	r28, 0x38	; 56
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 copy_u8Comand)
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	6d 97       	sbiw	r28, 0x1d	; 29
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 0 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	62 e0       	ldi	r22, 0x02	; 2
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the command to Data Port => 4_Bit high */
//        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand);
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN4,GET_BIT(copy_u8Comand,4));
    295e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2960:	82 95       	swap	r24
    2962:	8f 70       	andi	r24, 0x0F	; 15
    2964:	98 2f       	mov	r25, r24
    2966:	91 70       	andi	r25, 0x01	; 1
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	64 e0       	ldi	r22, 0x04	; 4
    296c:	49 2f       	mov	r20, r25
    296e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN5,GET_BIT(copy_u8Comand,5));
    2972:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2974:	82 95       	swap	r24
    2976:	86 95       	lsr	r24
    2978:	87 70       	andi	r24, 0x07	; 7
    297a:	98 2f       	mov	r25, r24
    297c:	91 70       	andi	r25, 0x01	; 1
    297e:	82 e0       	ldi	r24, 0x02	; 2
    2980:	65 e0       	ldi	r22, 0x05	; 5
    2982:	49 2f       	mov	r20, r25
    2984:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN6,GET_BIT(copy_u8Comand,6));
    2988:	8d 8d       	ldd	r24, Y+29	; 0x1d
    298a:	82 95       	swap	r24
    298c:	86 95       	lsr	r24
    298e:	86 95       	lsr	r24
    2990:	83 70       	andi	r24, 0x03	; 3
    2992:	98 2f       	mov	r25, r24
    2994:	91 70       	andi	r25, 0x01	; 1
    2996:	82 e0       	ldi	r24, 0x02	; 2
    2998:	66 e0       	ldi	r22, 0x06	; 6
    299a:	49 2f       	mov	r20, r25
    299c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN7,GET_BIT(copy_u8Comand,7));
    29a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a2:	98 2f       	mov	r25, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	99 27       	eor	r25, r25
    29a8:	99 1f       	adc	r25, r25
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	67 e0       	ldi	r22, 0x07	; 7
    29ae:	49 2f       	mov	r20, r25
    29b0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	61 e0       	ldi	r22, 0x01	; 1
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	a0 e8       	ldi	r26, 0x80	; 128
    29c4:	bf e3       	ldi	r27, 0x3F	; 63
    29c6:	89 8f       	std	Y+25, r24	; 0x19
    29c8:	9a 8f       	std	Y+26, r25	; 0x1a
    29ca:	ab 8f       	std	Y+27, r26	; 0x1b
    29cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ce:	69 8d       	ldd	r22, Y+25	; 0x19
    29d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	4a ef       	ldi	r20, 0xFA	; 250
    29dc:	54 e4       	ldi	r21, 0x44	; 68
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	8d 8b       	std	Y+21, r24	; 0x15
    29e8:	9e 8b       	std	Y+22, r25	; 0x16
    29ea:	af 8b       	std	Y+23, r26	; 0x17
    29ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29ee:	6d 89       	ldd	r22, Y+21	; 0x15
    29f0:	7e 89       	ldd	r23, Y+22	; 0x16
    29f2:	8f 89       	ldd	r24, Y+23	; 0x17
    29f4:	98 8d       	ldd	r25, Y+24	; 0x18
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e8       	ldi	r20, 0x80	; 128
    29fc:	5f e3       	ldi	r21, 0x3F	; 63
    29fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a02:	88 23       	and	r24, r24
    2a04:	2c f4       	brge	.+10     	; 0x2a10 <LCD_voidSendCommand+0xe6>
		__ticks = 1;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	9c 8b       	std	Y+20, r25	; 0x14
    2a0c:	8b 8b       	std	Y+19, r24	; 0x13
    2a0e:	3f c0       	rjmp	.+126    	; 0x2a8e <LCD_voidSendCommand+0x164>
	else if (__tmp > 65535)
    2a10:	6d 89       	ldd	r22, Y+21	; 0x15
    2a12:	7e 89       	ldd	r23, Y+22	; 0x16
    2a14:	8f 89       	ldd	r24, Y+23	; 0x17
    2a16:	98 8d       	ldd	r25, Y+24	; 0x18
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	3f ef       	ldi	r19, 0xFF	; 255
    2a1c:	4f e7       	ldi	r20, 0x7F	; 127
    2a1e:	57 e4       	ldi	r21, 0x47	; 71
    2a20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	4c f5       	brge	.+82     	; 0x2a7a <LCD_voidSendCommand+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a28:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e2       	ldi	r20, 0x20	; 32
    2a36:	51 e4       	ldi	r21, 0x41	; 65
    2a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	9c 8b       	std	Y+20, r25	; 0x14
    2a4e:	8b 8b       	std	Y+19, r24	; 0x13
    2a50:	0f c0       	rjmp	.+30     	; 0x2a70 <LCD_voidSendCommand+0x146>
    2a52:	88 ec       	ldi	r24, 0xC8	; 200
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9a 8b       	std	Y+18, r25	; 0x12
    2a58:	89 8b       	std	Y+17, r24	; 0x11
    2a5a:	89 89       	ldd	r24, Y+17	; 0x11
    2a5c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	f1 f7       	brne	.-4      	; 0x2a5e <LCD_voidSendCommand+0x134>
    2a62:	9a 8b       	std	Y+18, r25	; 0x12
    2a64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a66:	8b 89       	ldd	r24, Y+19	; 0x13
    2a68:	9c 89       	ldd	r25, Y+20	; 0x14
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	9c 8b       	std	Y+20, r25	; 0x14
    2a6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a70:	8b 89       	ldd	r24, Y+19	; 0x13
    2a72:	9c 89       	ldd	r25, Y+20	; 0x14
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	69 f7       	brne	.-38     	; 0x2a52 <LCD_voidSendCommand+0x128>
    2a78:	14 c0       	rjmp	.+40     	; 0x2aa2 <LCD_voidSendCommand+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a80:	98 8d       	ldd	r25, Y+24	; 0x18
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	9c 8b       	std	Y+20, r25	; 0x14
    2a8c:	8b 8b       	std	Y+19, r24	; 0x13
    2a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a90:	9c 89       	ldd	r25, Y+20	; 0x14
    2a92:	98 8b       	std	Y+16, r25	; 0x10
    2a94:	8f 87       	std	Y+15, r24	; 0x0f
    2a96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a98:	98 89       	ldd	r25, Y+16	; 0x10
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <LCD_voidSendCommand+0x170>
    2a9e:	98 8b       	std	Y+16, r25	; 0x10
    2aa0:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the command to Data Port => 4_Bit low */
//        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand<<4);
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN4,GET_BIT(copy_u8Comand,0));
    2aa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa4:	98 2f       	mov	r25, r24
    2aa6:	91 70       	andi	r25, 0x01	; 1
    2aa8:	82 e0       	ldi	r24, 0x02	; 2
    2aaa:	64 e0       	ldi	r22, 0x04	; 4
    2aac:	49 2f       	mov	r20, r25
    2aae:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN5,GET_BIT(copy_u8Comand,1));
    2ab2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ab4:	86 95       	lsr	r24
    2ab6:	98 2f       	mov	r25, r24
    2ab8:	91 70       	andi	r25, 0x01	; 1
    2aba:	82 e0       	ldi	r24, 0x02	; 2
    2abc:	65 e0       	ldi	r22, 0x05	; 5
    2abe:	49 2f       	mov	r20, r25
    2ac0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN6,GET_BIT(copy_u8Comand,2));
    2ac4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac6:	86 95       	lsr	r24
    2ac8:	86 95       	lsr	r24
    2aca:	98 2f       	mov	r25, r24
    2acc:	91 70       	andi	r25, 0x01	; 1
    2ace:	82 e0       	ldi	r24, 0x02	; 2
    2ad0:	66 e0       	ldi	r22, 0x06	; 6
    2ad2:	49 2f       	mov	r20, r25
    2ad4:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN7,GET_BIT(copy_u8Comand,3));
    2ad8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ada:	86 95       	lsr	r24
    2adc:	86 95       	lsr	r24
    2ade:	86 95       	lsr	r24
    2ae0:	98 2f       	mov	r25, r24
    2ae2:	91 70       	andi	r25, 0x01	; 1
    2ae4:	82 e0       	ldi	r24, 0x02	; 2
    2ae6:	67 e0       	ldi	r22, 0x07	; 7
    2ae8:	49 2f       	mov	r20, r25
    2aea:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	a0 e8       	ldi	r26, 0x80	; 128
    2afe:	bf e3       	ldi	r27, 0x3F	; 63
    2b00:	8b 87       	std	Y+11, r24	; 0x0b
    2b02:	9c 87       	std	Y+12, r25	; 0x0c
    2b04:	ad 87       	std	Y+13, r26	; 0x0d
    2b06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	4a ef       	ldi	r20, 0xFA	; 250
    2b16:	54 e4       	ldi	r21, 0x44	; 68
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	8f 83       	std	Y+7, r24	; 0x07
    2b22:	98 87       	std	Y+8, r25	; 0x08
    2b24:	a9 87       	std	Y+9, r26	; 0x09
    2b26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b28:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2a:	78 85       	ldd	r23, Y+8	; 0x08
    2b2c:	89 85       	ldd	r24, Y+9	; 0x09
    2b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e8       	ldi	r20, 0x80	; 128
    2b36:	5f e3       	ldi	r21, 0x3F	; 63
    2b38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b3c:	88 23       	and	r24, r24
    2b3e:	2c f4       	brge	.+10     	; 0x2b4a <LCD_voidSendCommand+0x220>
		__ticks = 1;
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	9e 83       	std	Y+6, r25	; 0x06
    2b46:	8d 83       	std	Y+5, r24	; 0x05
    2b48:	3f c0       	rjmp	.+126    	; 0x2bc8 <LCD_voidSendCommand+0x29e>
	else if (__tmp > 65535)
    2b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4c:	78 85       	ldd	r23, Y+8	; 0x08
    2b4e:	89 85       	ldd	r24, Y+9	; 0x09
    2b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	3f ef       	ldi	r19, 0xFF	; 255
    2b56:	4f e7       	ldi	r20, 0x7F	; 127
    2b58:	57 e4       	ldi	r21, 0x47	; 71
    2b5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b5e:	18 16       	cp	r1, r24
    2b60:	4c f5       	brge	.+82     	; 0x2bb4 <LCD_voidSendCommand+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e2       	ldi	r20, 0x20	; 32
    2b70:	51 e4       	ldi	r21, 0x41	; 65
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	bc 01       	movw	r22, r24
    2b7c:	cd 01       	movw	r24, r26
    2b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	9e 83       	std	Y+6, r25	; 0x06
    2b88:	8d 83       	std	Y+5, r24	; 0x05
    2b8a:	0f c0       	rjmp	.+30     	; 0x2baa <LCD_voidSendCommand+0x280>
    2b8c:	88 ec       	ldi	r24, 0xC8	; 200
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9c 83       	std	Y+4, r25	; 0x04
    2b92:	8b 83       	std	Y+3, r24	; 0x03
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	9c 81       	ldd	r25, Y+4	; 0x04
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <LCD_voidSendCommand+0x26e>
    2b9c:	9c 83       	std	Y+4, r25	; 0x04
    2b9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	9e 81       	ldd	r25, Y+6	; 0x06
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	69 f7       	brne	.-38     	; 0x2b8c <LCD_voidSendCommand+0x262>
    2bb2:	14 c0       	rjmp	.+40     	; 0x2bdc <LCD_voidSendCommand+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb6:	78 85       	ldd	r23, Y+8	; 0x08
    2bb8:	89 85       	ldd	r24, Y+9	; 0x09
    2bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9e 83       	std	Y+6, r25	; 0x06
    2bc6:	8d 83       	std	Y+5, r24	; 0x05
    2bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bca:	9e 81       	ldd	r25, Y+6	; 0x06
    2bcc:	9a 83       	std	Y+2, r25	; 0x02
    2bce:	89 83       	std	Y+1, r24	; 0x01
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <LCD_voidSendCommand+0x2aa>
    2bd8:	9a 83       	std	Y+2, r25	; 0x02
    2bda:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	61 e0       	ldi	r22, 0x01	; 1
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    #endif 
}
    2be6:	6d 96       	adiw	r28, 0x1d	; 29
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <LCD_voidDisplayCharacter>:

void LCD_voidDisplayCharacter(u8 copy_u8Data)
{
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	6d 97       	sbiw	r28, 0x1d	; 29
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	cd bf       	out	0x3d, r28	; 61
    2c0c:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 1 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	60 e0       	ldi	r22, 0x00	; 0
    2c12:	41 e0       	ldi	r20, 0x01	; 1
    2c14:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	62 e0       	ldi	r22, 0x02	; 2
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	61 e0       	ldi	r22, 0x01	; 1
    2c26:	41 e0       	ldi	r20, 0x01	; 1
    2c28:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the character to Data Port => 4_Bit high */
//        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data);
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN4,GET_BIT(copy_u8Data,4));
    2c2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c2e:	82 95       	swap	r24
    2c30:	8f 70       	andi	r24, 0x0F	; 15
    2c32:	98 2f       	mov	r25, r24
    2c34:	91 70       	andi	r25, 0x01	; 1
    2c36:	82 e0       	ldi	r24, 0x02	; 2
    2c38:	64 e0       	ldi	r22, 0x04	; 4
    2c3a:	49 2f       	mov	r20, r25
    2c3c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN5,GET_BIT(copy_u8Data,5));
    2c40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c42:	82 95       	swap	r24
    2c44:	86 95       	lsr	r24
    2c46:	87 70       	andi	r24, 0x07	; 7
    2c48:	98 2f       	mov	r25, r24
    2c4a:	91 70       	andi	r25, 0x01	; 1
    2c4c:	82 e0       	ldi	r24, 0x02	; 2
    2c4e:	65 e0       	ldi	r22, 0x05	; 5
    2c50:	49 2f       	mov	r20, r25
    2c52:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN6,GET_BIT(copy_u8Data,6));
    2c56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c58:	82 95       	swap	r24
    2c5a:	86 95       	lsr	r24
    2c5c:	86 95       	lsr	r24
    2c5e:	83 70       	andi	r24, 0x03	; 3
    2c60:	98 2f       	mov	r25, r24
    2c62:	91 70       	andi	r25, 0x01	; 1
    2c64:	82 e0       	ldi	r24, 0x02	; 2
    2c66:	66 e0       	ldi	r22, 0x06	; 6
    2c68:	49 2f       	mov	r20, r25
    2c6a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN7,GET_BIT(copy_u8Data,7));
    2c6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c70:	98 2f       	mov	r25, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	99 27       	eor	r25, r25
    2c76:	99 1f       	adc	r25, r25
    2c78:	82 e0       	ldi	r24, 0x02	; 2
    2c7a:	67 e0       	ldi	r22, 0x07	; 7
    2c7c:	49 2f       	mov	r20, r25
    2c7e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	61 e0       	ldi	r22, 0x01	; 1
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a0 e8       	ldi	r26, 0x80	; 128
    2c92:	bf e3       	ldi	r27, 0x3F	; 63
    2c94:	89 8f       	std	Y+25, r24	; 0x19
    2c96:	9a 8f       	std	Y+26, r25	; 0x1a
    2c98:	ab 8f       	std	Y+27, r26	; 0x1b
    2c9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ca0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a ef       	ldi	r20, 0xFA	; 250
    2caa:	54 e4       	ldi	r21, 0x44	; 68
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	8d 8b       	std	Y+21, r24	; 0x15
    2cb6:	9e 8b       	std	Y+22, r25	; 0x16
    2cb8:	af 8b       	std	Y+23, r26	; 0x17
    2cba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e8       	ldi	r20, 0x80	; 128
    2cca:	5f e3       	ldi	r21, 0x3F	; 63
    2ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd0:	88 23       	and	r24, r24
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <LCD_voidDisplayCharacter+0xe6>
		__ticks = 1;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9c 8b       	std	Y+20, r25	; 0x14
    2cda:	8b 8b       	std	Y+19, r24	; 0x13
    2cdc:	3f c0       	rjmp	.+126    	; 0x2d5c <LCD_voidDisplayCharacter+0x164>
	else if (__tmp > 65535)
    2cde:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	3f ef       	ldi	r19, 0xFF	; 255
    2cea:	4f e7       	ldi	r20, 0x7F	; 127
    2cec:	57 e4       	ldi	r21, 0x47	; 71
    2cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf2:	18 16       	cp	r1, r24
    2cf4:	4c f5       	brge	.+82     	; 0x2d48 <LCD_voidDisplayCharacter+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf6:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e2       	ldi	r20, 0x20	; 32
    2d04:	51 e4       	ldi	r21, 0x41	; 65
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9c 8b       	std	Y+20, r25	; 0x14
    2d1c:	8b 8b       	std	Y+19, r24	; 0x13
    2d1e:	0f c0       	rjmp	.+30     	; 0x2d3e <LCD_voidDisplayCharacter+0x146>
    2d20:	88 ec       	ldi	r24, 0xC8	; 200
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	9a 8b       	std	Y+18, r25	; 0x12
    2d26:	89 8b       	std	Y+17, r24	; 0x11
    2d28:	89 89       	ldd	r24, Y+17	; 0x11
    2d2a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <LCD_voidDisplayCharacter+0x134>
    2d30:	9a 8b       	std	Y+18, r25	; 0x12
    2d32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d34:	8b 89       	ldd	r24, Y+19	; 0x13
    2d36:	9c 89       	ldd	r25, Y+20	; 0x14
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	9c 8b       	std	Y+20, r25	; 0x14
    2d3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d40:	9c 89       	ldd	r25, Y+20	; 0x14
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	69 f7       	brne	.-38     	; 0x2d20 <LCD_voidDisplayCharacter+0x128>
    2d46:	14 c0       	rjmp	.+40     	; 0x2d70 <LCD_voidDisplayCharacter+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d48:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9c 8b       	std	Y+20, r25	; 0x14
    2d5a:	8b 8b       	std	Y+19, r24	; 0x13
    2d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d60:	98 8b       	std	Y+16, r25	; 0x10
    2d62:	8f 87       	std	Y+15, r24	; 0x0f
    2d64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d66:	98 89       	ldd	r25, Y+16	; 0x10
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <LCD_voidDisplayCharacter+0x170>
    2d6c:	98 8b       	std	Y+16, r25	; 0x10
    2d6e:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the character to Data Port => 4_Bit low */
//        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data<<4);
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN4,GET_BIT(copy_u8Data,0));
    2d70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d72:	98 2f       	mov	r25, r24
    2d74:	91 70       	andi	r25, 0x01	; 1
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	64 e0       	ldi	r22, 0x04	; 4
    2d7a:	49 2f       	mov	r20, r25
    2d7c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN5,GET_BIT(copy_u8Data,1));
    2d80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d82:	86 95       	lsr	r24
    2d84:	98 2f       	mov	r25, r24
    2d86:	91 70       	andi	r25, 0x01	; 1
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	65 e0       	ldi	r22, 0x05	; 5
    2d8c:	49 2f       	mov	r20, r25
    2d8e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN6,GET_BIT(copy_u8Data,2));
    2d92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d94:	86 95       	lsr	r24
    2d96:	86 95       	lsr	r24
    2d98:	98 2f       	mov	r25, r24
    2d9a:	91 70       	andi	r25, 0x01	; 1
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	66 e0       	ldi	r22, 0x06	; 6
    2da0:	49 2f       	mov	r20, r25
    2da2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(LCD_u8_DATA_PORT,DIO_u8_PIN7,GET_BIT(copy_u8Data,3));
    2da6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2da8:	86 95       	lsr	r24
    2daa:	86 95       	lsr	r24
    2dac:	86 95       	lsr	r24
    2dae:	98 2f       	mov	r25, r24
    2db0:	91 70       	andi	r25, 0x01	; 1
    2db2:	82 e0       	ldi	r24, 0x02	; 2
    2db4:	67 e0       	ldi	r22, 0x07	; 7
    2db6:	49 2f       	mov	r20, r25
    2db8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	61 e0       	ldi	r22, 0x01	; 1
    2dc0:	41 e0       	ldi	r20, 0x01	; 1
    2dc2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	a0 e8       	ldi	r26, 0x80	; 128
    2dcc:	bf e3       	ldi	r27, 0x3F	; 63
    2dce:	8b 87       	std	Y+11, r24	; 0x0b
    2dd0:	9c 87       	std	Y+12, r25	; 0x0c
    2dd2:	ad 87       	std	Y+13, r26	; 0x0d
    2dd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	4a ef       	ldi	r20, 0xFA	; 250
    2de4:	54 e4       	ldi	r21, 0x44	; 68
    2de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	8f 83       	std	Y+7, r24	; 0x07
    2df0:	98 87       	std	Y+8, r25	; 0x08
    2df2:	a9 87       	std	Y+9, r26	; 0x09
    2df4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2df6:	6f 81       	ldd	r22, Y+7	; 0x07
    2df8:	78 85       	ldd	r23, Y+8	; 0x08
    2dfa:	89 85       	ldd	r24, Y+9	; 0x09
    2dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	40 e8       	ldi	r20, 0x80	; 128
    2e04:	5f e3       	ldi	r21, 0x3F	; 63
    2e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e0a:	88 23       	and	r24, r24
    2e0c:	2c f4       	brge	.+10     	; 0x2e18 <LCD_voidDisplayCharacter+0x220>
		__ticks = 1;
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	9e 83       	std	Y+6, r25	; 0x06
    2e14:	8d 83       	std	Y+5, r24	; 0x05
    2e16:	3f c0       	rjmp	.+126    	; 0x2e96 <LCD_voidDisplayCharacter+0x29e>
	else if (__tmp > 65535)
    2e18:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1a:	78 85       	ldd	r23, Y+8	; 0x08
    2e1c:	89 85       	ldd	r24, Y+9	; 0x09
    2e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	3f ef       	ldi	r19, 0xFF	; 255
    2e24:	4f e7       	ldi	r20, 0x7F	; 127
    2e26:	57 e4       	ldi	r21, 0x47	; 71
    2e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e2c:	18 16       	cp	r1, r24
    2e2e:	4c f5       	brge	.+82     	; 0x2e82 <LCD_voidDisplayCharacter+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	40 e2       	ldi	r20, 0x20	; 32
    2e3e:	51 e4       	ldi	r21, 0x41	; 65
    2e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	bc 01       	movw	r22, r24
    2e4a:	cd 01       	movw	r24, r26
    2e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	9e 83       	std	Y+6, r25	; 0x06
    2e56:	8d 83       	std	Y+5, r24	; 0x05
    2e58:	0f c0       	rjmp	.+30     	; 0x2e78 <LCD_voidDisplayCharacter+0x280>
    2e5a:	88 ec       	ldi	r24, 0xC8	; 200
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	9c 83       	std	Y+4, r25	; 0x04
    2e60:	8b 83       	std	Y+3, r24	; 0x03
    2e62:	8b 81       	ldd	r24, Y+3	; 0x03
    2e64:	9c 81       	ldd	r25, Y+4	; 0x04
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <LCD_voidDisplayCharacter+0x26e>
    2e6a:	9c 83       	std	Y+4, r25	; 0x04
    2e6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e70:	9e 81       	ldd	r25, Y+6	; 0x06
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	9e 83       	std	Y+6, r25	; 0x06
    2e76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e78:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	69 f7       	brne	.-38     	; 0x2e5a <LCD_voidDisplayCharacter+0x262>
    2e80:	14 c0       	rjmp	.+40     	; 0x2eaa <LCD_voidDisplayCharacter+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e82:	6f 81       	ldd	r22, Y+7	; 0x07
    2e84:	78 85       	ldd	r23, Y+8	; 0x08
    2e86:	89 85       	ldd	r24, Y+9	; 0x09
    2e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	9e 83       	std	Y+6, r25	; 0x06
    2e94:	8d 83       	std	Y+5, r24	; 0x05
    2e96:	8d 81       	ldd	r24, Y+5	; 0x05
    2e98:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9a:	9a 83       	std	Y+2, r25	; 0x02
    2e9c:	89 83       	std	Y+1, r24	; 0x01
    2e9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	f1 f7       	brne	.-4      	; 0x2ea2 <LCD_voidDisplayCharacter+0x2aa>
    2ea6:	9a 83       	std	Y+2, r25	; 0x02
    2ea8:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	61 e0       	ldi	r22, 0x01	; 1
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    #endif
}
    2eb4:	6d 96       	adiw	r28, 0x1d	; 29
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <LCD_voidCreateCustomCharacter>:

void LCD_voidCreateCustomCharacter(pu8 copy_pu8Character,u8 copy_u8PatternIndex,u8 copy_u8Row,u8 copy_u8Col)
{
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	27 97       	sbiw	r28, 0x07	; 7
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
    2eda:	9c 83       	std	Y+4, r25	; 0x04
    2edc:	8b 83       	std	Y+3, r24	; 0x03
    2ede:	6d 83       	std	Y+5, r22	; 0x05
    2ee0:	4e 83       	std	Y+6, r20	; 0x06
    2ee2:	2f 83       	std	Y+7, r18	; 0x07
    u8 local_u8Count;
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	88 0f       	add	r24, r24
    2ef0:	99 1f       	adc	r25, r25
    2ef2:	88 0f       	add	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	89 83       	std	Y+1, r24	; 0x01
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	80 5c       	subi	r24, 0xC0	; 192
    2efc:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_voidSendCommand>
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    2f00:	1a 82       	std	Y+2, r1	; 0x02
    2f02:	0e c0       	rjmp	.+28     	; 0x2f20 <LCD_voidCreateCustomCharacter+0x5a>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    2f04:	8a 81       	ldd	r24, Y+2	; 0x02
    2f06:	28 2f       	mov	r18, r24
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0e:	fc 01       	movw	r30, r24
    2f10:	e2 0f       	add	r30, r18
    2f12:	f3 1f       	adc	r31, r19
    2f14:	80 81       	ld	r24, Z
    2f16:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <LCD_voidDisplayCharacter>
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	8f 5f       	subi	r24, 0xFF	; 255
    2f1e:	8a 83       	std	Y+2, r24	; 0x02
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	88 30       	cpi	r24, 0x08	; 8
    2f24:	78 f3       	brcs	.-34     	; 0x2f04 <LCD_voidCreateCustomCharacter+0x3e>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    }
    /* set DDRAM address */
    LCD_voidGoToXY(copy_u8Row,copy_u8Col);
    2f26:	8e 81       	ldd	r24, Y+6	; 0x06
    2f28:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <LCD_voidGoToXY>
    /* display the pattern */
    LCD_voidDisplayCharacter(copy_u8PatternIndex);
    2f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f30:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <LCD_voidDisplayCharacter>
}
    2f34:	27 96       	adiw	r28, 0x07	; 7
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	cf 91       	pop	r28
    2f42:	df 91       	pop	r29
    2f44:	08 95       	ret

00002f46 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 copy_u8Row,u8 copy_u8Col)
{
    2f46:	df 93       	push	r29
    2f48:	cf 93       	push	r28
    2f4a:	00 d0       	rcall	.+0      	; 0x2f4c <LCD_voidGoToXY+0x6>
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	6a 83       	std	Y+2, r22	; 0x02
    /* to select the row and the column*/
    LCD_voidSendCommand(LCD_u8_ADRESS + copy_u8Row + copy_u8Col);
    2f54:	99 81       	ldd	r25, Y+1	; 0x01
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	89 0f       	add	r24, r25
    2f5a:	80 58       	subi	r24, 0x80	; 128
    2f5c:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_voidSendCommand>
}
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	cf 91       	pop	r28
    2f66:	df 91       	pop	r29
    2f68:	08 95       	ret

00002f6a <LCD_u8DisplayString>:

u8 LCD_u8DisplayString(pu8 copy_pu8String)
{
    2f6a:	df 93       	push	r29
    2f6c:	cf 93       	push	r28
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <LCD_u8DisplayString+0x6>
    2f70:	00 d0       	rcall	.+0      	; 0x2f72 <LCD_u8DisplayString+0x8>
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	9c 83       	std	Y+4, r25	; 0x04
    2f78:	8b 83       	std	Y+3, r24	; 0x03
    u8 local_u8ErrorState = 0;
    2f7a:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8Count = 0;
    2f7c:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8String != NULL)
    2f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f80:	9c 81       	ldd	r25, Y+4	; 0x04
    2f82:	00 97       	sbiw	r24, 0x00	; 0
    2f84:	d9 f0       	breq	.+54     	; 0x2fbc <LCD_u8DisplayString+0x52>
    2f86:	0e c0       	rjmp	.+28     	; 0x2fa4 <LCD_u8DisplayString+0x3a>
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
        {
            /* diplay the first character in the string */
           LCD_voidDisplayCharacter(copy_pu8String[local_u8Count]);
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f90:	9c 81       	ldd	r25, Y+4	; 0x04
    2f92:	fc 01       	movw	r30, r24
    2f94:	e2 0f       	add	r30, r18
    2f96:	f3 1f       	adc	r31, r19
    2f98:	80 81       	ld	r24, Z
    2f9a:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <LCD_voidDisplayCharacter>
           local_u8Count++; 
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	8f 5f       	subi	r24, 0xFF	; 255
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    u8 local_u8ErrorState = 0;
    u8 local_u8Count = 0;
    if(copy_pu8String != NULL)
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	9c 81       	ldd	r25, Y+4	; 0x04
    2fae:	fc 01       	movw	r30, r24
    2fb0:	e2 0f       	add	r30, r18
    2fb2:	f3 1f       	adc	r31, r19
    2fb4:	80 81       	ld	r24, Z
    2fb6:	88 23       	and	r24, r24
    2fb8:	39 f7       	brne	.-50     	; 0x2f88 <LCD_u8DisplayString+0x1e>
    2fba:	02 c0       	rjmp	.+4      	; 0x2fc0 <LCD_u8DisplayString+0x56>
           local_u8Count++; 
        }
    }
    else
    {
        local_u8ErrorState = 1;
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	8a 83       	std	Y+2, r24	; 0x02
    }
    return local_u8ErrorState;
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2fc2:	0f 90       	pop	r0
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber(s32 copy_u32Number)
{
    2fd0:	ef 92       	push	r14
    2fd2:	ff 92       	push	r15
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	60 97       	sbiw	r28, 0x10	; 16
    2fe2:	0f b6       	in	r0, 0x3f	; 63
    2fe4:	f8 94       	cli
    2fe6:	de bf       	out	0x3e, r29	; 62
    2fe8:	0f be       	out	0x3f, r0	; 63
    2fea:	cd bf       	out	0x3d, r28	; 61
    2fec:	6d 87       	std	Y+13, r22	; 0x0d
    2fee:	7e 87       	std	Y+14, r23	; 0x0e
    2ff0:	8f 87       	std	Y+15, r24	; 0x0f
    2ff2:	98 8b       	std	Y+16, r25	; 0x10
    s32 local_u8Reserved = 0;
    2ff4:	19 86       	std	Y+9, r1	; 0x09
    2ff6:	1a 86       	std	Y+10, r1	; 0x0a
    2ff8:	1b 86       	std	Y+11, r1	; 0x0b
    2ffa:	1c 86       	std	Y+12, r1	; 0x0c
    s32 mult = 1,i=0;
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	a0 e0       	ldi	r26, 0x00	; 0
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	8d 83       	std	Y+5, r24	; 0x05
    3006:	9e 83       	std	Y+6, r25	; 0x06
    3008:	af 83       	std	Y+7, r26	; 0x07
    300a:	b8 87       	std	Y+8, r27	; 0x08
    300c:	19 82       	std	Y+1, r1	; 0x01
    300e:	1a 82       	std	Y+2, r1	; 0x02
    3010:	1b 82       	std	Y+3, r1	; 0x03
    3012:	1c 82       	std	Y+4, r1	; 0x04
    if(copy_u32Number == 0)
    3014:	8d 85       	ldd	r24, Y+13	; 0x0d
    3016:	9e 85       	ldd	r25, Y+14	; 0x0e
    3018:	af 85       	ldd	r26, Y+15	; 0x0f
    301a:	b8 89       	ldd	r27, Y+16	; 0x10
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	a1 05       	cpc	r26, r1
    3020:	b1 05       	cpc	r27, r1
    3022:	21 f4       	brne	.+8      	; 0x302c <LCD_voidDisplayNumber+0x5c>
    {
        LCD_voidDisplayCharacter('0');
    3024:	80 e3       	ldi	r24, 0x30	; 48
    3026:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <LCD_voidDisplayCharacter>
    302a:	6a c0       	rjmp	.+212    	; 0x3100 <LCD_voidDisplayNumber+0x130>
    }
    else if(copy_u32Number < 0)
    302c:	8d 85       	ldd	r24, Y+13	; 0x0d
    302e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3030:	af 85       	ldd	r26, Y+15	; 0x0f
    3032:	b8 89       	ldd	r27, Y+16	; 0x10
    3034:	bb 23       	and	r27, r27
    3036:	0c f0       	brlt	.+2      	; 0x303a <LCD_voidDisplayNumber+0x6a>
    3038:	63 c0       	rjmp	.+198    	; 0x3100 <LCD_voidDisplayNumber+0x130>
    {
    	LCD_voidDisplayCharacter('-');
    303a:	8d e2       	ldi	r24, 0x2D	; 45
    303c:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <LCD_voidDisplayCharacter>
    	copy_u32Number = copy_u32Number * (-1);
    3040:	8d 85       	ldd	r24, Y+13	; 0x0d
    3042:	9e 85       	ldd	r25, Y+14	; 0x0e
    3044:	af 85       	ldd	r26, Y+15	; 0x0f
    3046:	b8 89       	ldd	r27, Y+16	; 0x10
    3048:	b0 95       	com	r27
    304a:	a0 95       	com	r26
    304c:	90 95       	com	r25
    304e:	81 95       	neg	r24
    3050:	9f 4f       	sbci	r25, 0xFF	; 255
    3052:	af 4f       	sbci	r26, 0xFF	; 255
    3054:	bf 4f       	sbci	r27, 0xFF	; 255
    3056:	8d 87       	std	Y+13, r24	; 0x0d
    3058:	9e 87       	std	Y+14, r25	; 0x0e
    305a:	af 87       	std	Y+15, r26	; 0x0f
    305c:	b8 8b       	std	Y+16, r27	; 0x10
    305e:	50 c0       	rjmp	.+160    	; 0x3100 <LCD_voidDisplayNumber+0x130>
    }
    while(copy_u32Number != 0)
    {
    	local_u8Reserved = (local_u8Reserved * 10) + (copy_u32Number % 10);
    3060:	89 85       	ldd	r24, Y+9	; 0x09
    3062:	9a 85       	ldd	r25, Y+10	; 0x0a
    3064:	ab 85       	ldd	r26, Y+11	; 0x0b
    3066:	bc 85       	ldd	r27, Y+12	; 0x0c
    3068:	2a e0       	ldi	r18, 0x0A	; 10
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e0       	ldi	r20, 0x00	; 0
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	bc 01       	movw	r22, r24
    3072:	cd 01       	movw	r24, r26
    3074:	0e 94 86 1a 	call	0x350c	; 0x350c <__mulsi3>
    3078:	7b 01       	movw	r14, r22
    307a:	8c 01       	movw	r16, r24
    307c:	8d 85       	ldd	r24, Y+13	; 0x0d
    307e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3080:	af 85       	ldd	r26, Y+15	; 0x0f
    3082:	b8 89       	ldd	r27, Y+16	; 0x10
    3084:	2a e0       	ldi	r18, 0x0A	; 10
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	50 e0       	ldi	r21, 0x00	; 0
    308c:	bc 01       	movw	r22, r24
    308e:	cd 01       	movw	r24, r26
    3090:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__divmodsi4>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	8e 0d       	add	r24, r14
    309a:	9f 1d       	adc	r25, r15
    309c:	a0 1f       	adc	r26, r16
    309e:	b1 1f       	adc	r27, r17
    30a0:	89 87       	std	Y+9, r24	; 0x09
    30a2:	9a 87       	std	Y+10, r25	; 0x0a
    30a4:	ab 87       	std	Y+11, r26	; 0x0b
    30a6:	bc 87       	std	Y+12, r27	; 0x0c
    	if(local_u8Reserved == 0)
    30a8:	89 85       	ldd	r24, Y+9	; 0x09
    30aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ac:	ab 85       	ldd	r26, Y+11	; 0x0b
    30ae:	bc 85       	ldd	r27, Y+12	; 0x0c
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	a1 05       	cpc	r26, r1
    30b4:	b1 05       	cpc	r27, r1
    30b6:	91 f4       	brne	.+36     	; 0x30dc <LCD_voidDisplayNumber+0x10c>
    	{
    		mult *= 10;
    30b8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ba:	9e 81       	ldd	r25, Y+6	; 0x06
    30bc:	af 81       	ldd	r26, Y+7	; 0x07
    30be:	b8 85       	ldd	r27, Y+8	; 0x08
    30c0:	2a e0       	ldi	r18, 0x0A	; 10
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	0e 94 86 1a 	call	0x350c	; 0x350c <__mulsi3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	8d 83       	std	Y+5, r24	; 0x05
    30d6:	9e 83       	std	Y+6, r25	; 0x06
    30d8:	af 83       	std	Y+7, r26	; 0x07
    30da:	b8 87       	std	Y+8, r27	; 0x08
    	}
        copy_u32Number /= 10;
    30dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30de:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e0:	af 85       	ldd	r26, Y+15	; 0x0f
    30e2:	b8 89       	ldd	r27, Y+16	; 0x10
    30e4:	2a e0       	ldi	r18, 0x0A	; 10
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e0       	ldi	r20, 0x00	; 0
    30ea:	50 e0       	ldi	r21, 0x00	; 0
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__divmodsi4>
    30f4:	da 01       	movw	r26, r20
    30f6:	c9 01       	movw	r24, r18
    30f8:	8d 87       	std	Y+13, r24	; 0x0d
    30fa:	9e 87       	std	Y+14, r25	; 0x0e
    30fc:	af 87       	std	Y+15, r26	; 0x0f
    30fe:	b8 8b       	std	Y+16, r27	; 0x10
    else if(copy_u32Number < 0)
    {
    	LCD_voidDisplayCharacter('-');
    	copy_u32Number = copy_u32Number * (-1);
    }
    while(copy_u32Number != 0)
    3100:	8d 85       	ldd	r24, Y+13	; 0x0d
    3102:	9e 85       	ldd	r25, Y+14	; 0x0e
    3104:	af 85       	ldd	r26, Y+15	; 0x0f
    3106:	b8 89       	ldd	r27, Y+16	; 0x10
    3108:	00 97       	sbiw	r24, 0x00	; 0
    310a:	a1 05       	cpc	r26, r1
    310c:	b1 05       	cpc	r27, r1
    310e:	09 f0       	breq	.+2      	; 0x3112 <LCD_voidDisplayNumber+0x142>
    3110:	a7 cf       	rjmp	.-178    	; 0x3060 <LCD_voidDisplayNumber+0x90>
    3112:	44 c0       	rjmp	.+136    	; 0x319c <LCD_voidDisplayNumber+0x1cc>
    	}
        copy_u32Number /= 10;
    }
    while(local_u8Reserved != i)
    {
    	LCD_voidDisplayCharacter((local_u8Reserved % 10) + '0');
    3114:	89 85       	ldd	r24, Y+9	; 0x09
    3116:	9a 85       	ldd	r25, Y+10	; 0x0a
    3118:	ab 85       	ldd	r26, Y+11	; 0x0b
    311a:	bc 85       	ldd	r27, Y+12	; 0x0c
    311c:	2a e0       	ldi	r18, 0x0A	; 10
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	bc 01       	movw	r22, r24
    3126:	cd 01       	movw	r24, r26
    3128:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__divmodsi4>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	80 5d       	subi	r24, 0xD0	; 208
    3132:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <LCD_voidDisplayCharacter>
        local_u8Reserved /= 10;
    3136:	89 85       	ldd	r24, Y+9	; 0x09
    3138:	9a 85       	ldd	r25, Y+10	; 0x0a
    313a:	ab 85       	ldd	r26, Y+11	; 0x0b
    313c:	bc 85       	ldd	r27, Y+12	; 0x0c
    313e:	2a e0       	ldi	r18, 0x0A	; 10
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e0       	ldi	r20, 0x00	; 0
    3144:	50 e0       	ldi	r21, 0x00	; 0
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__divmodsi4>
    314e:	da 01       	movw	r26, r20
    3150:	c9 01       	movw	r24, r18
    3152:	89 87       	std	Y+9, r24	; 0x09
    3154:	9a 87       	std	Y+10, r25	; 0x0a
    3156:	ab 87       	std	Y+11, r26	; 0x0b
    3158:	bc 87       	std	Y+12, r27	; 0x0c
        if((local_u8Reserved == 0) && (mult >= 10))
    315a:	89 85       	ldd	r24, Y+9	; 0x09
    315c:	9a 85       	ldd	r25, Y+10	; 0x0a
    315e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3160:	bc 85       	ldd	r27, Y+12	; 0x0c
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	a1 05       	cpc	r26, r1
    3166:	b1 05       	cpc	r27, r1
    3168:	c9 f4       	brne	.+50     	; 0x319c <LCD_voidDisplayNumber+0x1cc>
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	af 81       	ldd	r26, Y+7	; 0x07
    3170:	b8 85       	ldd	r27, Y+8	; 0x08
    3172:	8a 30       	cpi	r24, 0x0A	; 10
    3174:	91 05       	cpc	r25, r1
    3176:	a1 05       	cpc	r26, r1
    3178:	b1 05       	cpc	r27, r1
    317a:	84 f0       	brlt	.+32     	; 0x319c <LCD_voidDisplayNumber+0x1cc>
        {
        	i = 1;
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	a0 e0       	ldi	r26, 0x00	; 0
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	9a 83       	std	Y+2, r25	; 0x02
    3188:	ab 83       	std	Y+3, r26	; 0x03
    318a:	bc 83       	std	Y+4, r27	; 0x04
        	local_u8Reserved = mult;
    318c:	8d 81       	ldd	r24, Y+5	; 0x05
    318e:	9e 81       	ldd	r25, Y+6	; 0x06
    3190:	af 81       	ldd	r26, Y+7	; 0x07
    3192:	b8 85       	ldd	r27, Y+8	; 0x08
    3194:	89 87       	std	Y+9, r24	; 0x09
    3196:	9a 87       	std	Y+10, r25	; 0x0a
    3198:	ab 87       	std	Y+11, r26	; 0x0b
    319a:	bc 87       	std	Y+12, r27	; 0x0c
    	{
    		mult *= 10;
    	}
        copy_u32Number /= 10;
    }
    while(local_u8Reserved != i)
    319c:	29 85       	ldd	r18, Y+9	; 0x09
    319e:	3a 85       	ldd	r19, Y+10	; 0x0a
    31a0:	4b 85       	ldd	r20, Y+11	; 0x0b
    31a2:	5c 85       	ldd	r21, Y+12	; 0x0c
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	9a 81       	ldd	r25, Y+2	; 0x02
    31a8:	ab 81       	ldd	r26, Y+3	; 0x03
    31aa:	bc 81       	ldd	r27, Y+4	; 0x04
    31ac:	28 17       	cp	r18, r24
    31ae:	39 07       	cpc	r19, r25
    31b0:	4a 07       	cpc	r20, r26
    31b2:	5b 07       	cpc	r21, r27
    31b4:	09 f0       	breq	.+2      	; 0x31b8 <LCD_voidDisplayNumber+0x1e8>
    31b6:	ae cf       	rjmp	.-164    	; 0x3114 <LCD_voidDisplayNumber+0x144>
        {
        	i = 1;
        	local_u8Reserved = mult;
        }
    }
}
    31b8:	60 96       	adiw	r28, 0x10	; 16
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	ff 90       	pop	r15
    31ce:	ef 90       	pop	r14
    31d0:	08 95       	ret

000031d2 <LCD_voidDisplayClear>:

void LCD_voidDisplayClear(void)
{
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0x01);
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_voidSendCommand>
}
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <main>:
//void Read_Led_Pins(void);
//void Send_to_Master(void);
void Receive_from_Master_MC(void);
//void Alarm_Sys(void);
int main(void)
{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    // call PORT_init function
	PORT_voidInit();
    31ee:	0e 94 5e 09 	call	0x12bc	; 0x12bc <PORT_voidInit>
	// call PORT_init function
    UART_voidInit();
    31f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_voidInit>
    // call SPI_init function
    SPI_voidMasterInit();
    31f6:	0e 94 76 07 	call	0xeec	; 0xeec <SPI_voidMasterInit>
    LCD_voidInit();
    31fa:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_voidInit>
	ADC_init(VREF_AREF,ADC_PRESCALER_64);
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	66 e0       	ldi	r22, 0x06	; 6
    3202:	0e 94 1c 12 	call	0x2438	; 0x2438 <ADC_init>
	Timer_FASTPWMvoidinit();
    3206:	0e 94 cb 06 	call	0xd96	; 0xd96 <Timer_FASTPWMvoidinit>
	while(1)
	{
		    Temperature_u16Value = ADC_Read(CH_0);
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	0e 94 75 12 	call	0x24ea	; 0x24ea <ADC_Read>
    3210:	90 93 a5 00 	sts	0x00A5, r25
    3214:	80 93 a4 00 	sts	0x00A4, r24
			DIO_DioEnumWriteChannel(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_LOW);
    3218:	83 e0       	ldi	r24, 0x03	; 3
    321a:	66 e0       	ldi	r22, 0x06	; 6
    321c:	40 e0       	ldi	r20, 0x00	; 0
    321e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
			DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_LOW);
    3222:	82 e0       	ldi	r24, 0x02	; 2
    3224:	63 e0       	ldi	r22, 0x03	; 3
    3226:	40 e0       	ldi	r20, 0x00	; 0
    3228:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    322c:	1c c0       	rjmp	.+56     	; 0x3266 <main+0x80>
			while(Temperature_u16Value >= 70){
				DIO_DioEnumWriteChannel(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_HIGH);
    322e:	83 e0       	ldi	r24, 0x03	; 3
    3230:	66 e0       	ldi	r22, 0x06	; 6
    3232:	41 e0       	ldi	r20, 0x01	; 1
    3234:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
				DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    3238:	82 e0       	ldi	r24, 0x02	; 2
    323a:	63 e0       	ldi	r22, 0x03	; 3
    323c:	41 e0       	ldi	r20, 0x01	; 1
    323e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
				Timer_voidsetPWM(0);
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Timer_voidsetPWM>
				LCD_voidGoToXY(LCD_u8_ROW2,1);
    3248:	80 e4       	ldi	r24, 0x40	; 64
    324a:	61 e0       	ldi	r22, 0x01	; 1
    324c:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <LCD_voidGoToXY>
				LCD_u8DisplayString("ALARM ! ! !");
    3250:	80 e6       	ldi	r24, 0x60	; 96
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_u8DisplayString>
				Temperature_u16Value = ADC_Read(CH_0);
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	0e 94 75 12 	call	0x24ea	; 0x24ea <ADC_Read>
    325e:	90 93 a5 00 	sts	0x00A5, r25
    3262:	80 93 a4 00 	sts	0x00A4, r24
	while(1)
	{
		    Temperature_u16Value = ADC_Read(CH_0);
			DIO_DioEnumWriteChannel(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_LOW);
			DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_LOW);
			while(Temperature_u16Value >= 70){
    3266:	80 91 a4 00 	lds	r24, 0x00A4
    326a:	90 91 a5 00 	lds	r25, 0x00A5
    326e:	86 34       	cpi	r24, 0x46	; 70
    3270:	91 05       	cpc	r25, r1
    3272:	e8 f6       	brcc	.-70     	; 0x322e <main+0x48>
				Timer_voidsetPWM(0);
				LCD_voidGoToXY(LCD_u8_ROW2,1);
				LCD_u8DisplayString("ALARM ! ! !");
				Temperature_u16Value = ADC_Read(CH_0);
			}
			LCD_voidDisplayClear();
    3274:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <LCD_voidDisplayClear>
    3278:	32 c0       	rjmp	.+100    	; 0x32de <main+0xf8>
			while(Temperature_u16Value < 70){
				LCD_voidGoToXY(LCD_u8_ROW1,0);
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	60 e0       	ldi	r22, 0x00	; 0
    327e:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <LCD_voidGoToXY>
				LCD_u8DisplayString("TEMPERATURE =     c");
    3282:	8c e6       	ldi	r24, 0x6C	; 108
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_u8DisplayString>
				LCD_voidGoToXY(LCD_u8_ROW1,14);
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	6e e0       	ldi	r22, 0x0E	; 14
    328e:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <LCD_voidGoToXY>
				LCD_voidDisplayNumber(Temperature_u16Value);
    3292:	80 91 a4 00 	lds	r24, 0x00A4
    3296:	90 91 a5 00 	lds	r25, 0x00A5
    329a:	cc 01       	movw	r24, r24
    329c:	a0 e0       	ldi	r26, 0x00	; 0
    329e:	b0 e0       	ldi	r27, 0x00	; 0
    32a0:	bc 01       	movw	r22, r24
    32a2:	cd 01       	movw	r24, r26
    32a4:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_voidDisplayNumber>
				LCD_voidGoToXY(LCD_u8_ROW2,0);
    32a8:	80 e4       	ldi	r24, 0x40	; 64
    32aa:	60 e0       	ldi	r22, 0x00	; 0
    32ac:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <LCD_voidGoToXY>
				LCD_u8DisplayString("FIRE STATE:");
    32b0:	80 e8       	ldi	r24, 0x80	; 128
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_u8DisplayString>
				LCD_voidGoToXY(LCD_u8_ROW2,12);
    32b8:	80 e4       	ldi	r24, 0x40	; 64
    32ba:	6c e0       	ldi	r22, 0x0C	; 12
    32bc:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <LCD_voidGoToXY>
				LCD_u8DisplayString("STABLE");
    32c0:	8c e8       	ldi	r24, 0x8C	; 140
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_u8DisplayString>
				fan_crtl();
    32c8:	0e 94 77 19 	call	0x32ee	; 0x32ee <fan_crtl>
				Temperature_u16Value = ADC_Read(CH_0);
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	0e 94 75 12 	call	0x24ea	; 0x24ea <ADC_Read>
    32d2:	90 93 a5 00 	sts	0x00A5, r25
    32d6:	80 93 a4 00 	sts	0x00A4, r24
				Receive_from_Master_MC();
    32da:	0e 94 14 1a 	call	0x3428	; 0x3428 <Receive_from_Master_MC>
				LCD_voidGoToXY(LCD_u8_ROW2,1);
				LCD_u8DisplayString("ALARM ! ! !");
				Temperature_u16Value = ADC_Read(CH_0);
			}
			LCD_voidDisplayClear();
			while(Temperature_u16Value < 70){
    32de:	80 91 a4 00 	lds	r24, 0x00A4
    32e2:	90 91 a5 00 	lds	r25, 0x00A5
    32e6:	86 34       	cpi	r24, 0x46	; 70
    32e8:	91 05       	cpc	r25, r1
    32ea:	38 f2       	brcs	.-114    	; 0x327a <main+0x94>
    32ec:	8e cf       	rjmp	.-228    	; 0x320a <main+0x24>

000032ee <fan_crtl>:
			}
	}
	return 0;
}

void fan_crtl(void){
    32ee:	df 93       	push	r29
    32f0:	cf 93       	push	r28
    32f2:	00 d0       	rcall	.+0      	; 0x32f4 <fan_crtl+0x6>
    32f4:	0f 92       	push	r0
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62

	Temperature_u16Value = ADC_Read(CH_0);
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	0e 94 75 12 	call	0x24ea	; 0x24ea <ADC_Read>
    3300:	90 93 a5 00 	sts	0x00A5, r25
    3304:	80 93 a4 00 	sts	0x00A4, r24
//	UART_UARTEnumSendData((u8)Temperature_u16Value);
	LCD_voidGoToXY(LCD_u8_ROW1,14);
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	6e e0       	ldi	r22, 0x0E	; 14
    330c:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <LCD_voidGoToXY>
	LCD_voidDisplayNumber(Temperature_u16Value);
    3310:	80 91 a4 00 	lds	r24, 0x00A4
    3314:	90 91 a5 00 	lds	r25, 0x00A5
    3318:	cc 01       	movw	r24, r24
    331a:	a0 e0       	ldi	r26, 0x00	; 0
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_voidDisplayNumber>
	u8 level=Temperature_u16Value/templvl;
    3326:	80 91 a4 00 	lds	r24, 0x00A4
    332a:	90 91 a5 00 	lds	r25, 0x00A5
    332e:	24 e1       	ldi	r18, 0x14	; 20
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	b9 01       	movw	r22, r18
    3334:	0e 94 a5 1a 	call	0x354a	; 0x354a <__udivmodhi4>
    3338:	cb 01       	movw	r24, r22
    333a:	89 83       	std	Y+1, r24	; 0x01
	switch(level){
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	28 2f       	mov	r18, r24
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	3b 83       	std	Y+3, r19	; 0x03
    3344:	2a 83       	std	Y+2, r18	; 0x02
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	9b 81       	ldd	r25, Y+3	; 0x03
    334a:	82 30       	cpi	r24, 0x02	; 2
    334c:	91 05       	cpc	r25, r1
    334e:	b9 f1       	breq	.+110    	; 0x33be <fan_crtl+0xd0>
    3350:	2a 81       	ldd	r18, Y+2	; 0x02
    3352:	3b 81       	ldd	r19, Y+3	; 0x03
    3354:	23 30       	cpi	r18, 0x03	; 3
    3356:	31 05       	cpc	r19, r1
    3358:	54 f4       	brge	.+20     	; 0x336e <fan_crtl+0x80>
    335a:	8a 81       	ldd	r24, Y+2	; 0x02
    335c:	9b 81       	ldd	r25, Y+3	; 0x03
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	b1 f0       	breq	.+44     	; 0x338e <fan_crtl+0xa0>
    3362:	2a 81       	ldd	r18, Y+2	; 0x02
    3364:	3b 81       	ldd	r19, Y+3	; 0x03
    3366:	21 30       	cpi	r18, 0x01	; 1
    3368:	31 05       	cpc	r19, r1
    336a:	e9 f0       	breq	.+58     	; 0x33a6 <fan_crtl+0xb8>
    336c:	57 c0       	rjmp	.+174    	; 0x341c <fan_crtl+0x12e>
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
    3370:	9b 81       	ldd	r25, Y+3	; 0x03
    3372:	84 30       	cpi	r24, 0x04	; 4
    3374:	91 05       	cpc	r25, r1
    3376:	d9 f1       	breq	.+118    	; 0x33ee <fan_crtl+0x100>
    3378:	2a 81       	ldd	r18, Y+2	; 0x02
    337a:	3b 81       	ldd	r19, Y+3	; 0x03
    337c:	24 30       	cpi	r18, 0x04	; 4
    337e:	31 05       	cpc	r19, r1
    3380:	54 f1       	brlt	.+84     	; 0x33d6 <fan_crtl+0xe8>
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	9b 81       	ldd	r25, Y+3	; 0x03
    3386:	85 30       	cpi	r24, 0x05	; 5
    3388:	91 05       	cpc	r25, r1
    338a:	e9 f1       	breq	.+122    	; 0x3406 <fan_crtl+0x118>
    338c:	47 c0       	rjmp	.+142    	; 0x341c <fan_crtl+0x12e>
		case 0:
		Timer_voidsetPWM(255);
    338e:	8f ef       	ldi	r24, 0xFF	; 255
    3390:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Timer_voidsetPWM>
		Fan_u16Speed=Timer_getPWMdutycycle();
    3394:	0e 94 16 07 	call	0xe2c	; 0xe2c <Timer_getPWMdutycycle>
    3398:	80 93 a7 00 	sts	0x00A7, r24
		SPI_SPIEnumSendData(Fan_u16Speed);
    339c:	80 91 a7 00 	lds	r24, 0x00A7
    33a0:	0e 94 11 08 	call	0x1022	; 0x1022 <SPI_SPIEnumSendData>
    33a4:	3b c0       	rjmp	.+118    	; 0x341c <fan_crtl+0x12e>
		break;
		case 1:
		Timer_voidsetPWM(200);
    33a6:	88 ec       	ldi	r24, 0xC8	; 200
    33a8:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Timer_voidsetPWM>
		Fan_u16Speed=Timer_getPWMdutycycle();
    33ac:	0e 94 16 07 	call	0xe2c	; 0xe2c <Timer_getPWMdutycycle>
    33b0:	80 93 a7 00 	sts	0x00A7, r24
		SPI_SPIEnumSendData(Fan_u16Speed);
    33b4:	80 91 a7 00 	lds	r24, 0x00A7
    33b8:	0e 94 11 08 	call	0x1022	; 0x1022 <SPI_SPIEnumSendData>
    33bc:	2f c0       	rjmp	.+94     	; 0x341c <fan_crtl+0x12e>
		break;
		case 2:
		Timer_voidsetPWM(150);
    33be:	86 e9       	ldi	r24, 0x96	; 150
    33c0:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Timer_voidsetPWM>
		Fan_u16Speed=Timer_getPWMdutycycle();
    33c4:	0e 94 16 07 	call	0xe2c	; 0xe2c <Timer_getPWMdutycycle>
    33c8:	80 93 a7 00 	sts	0x00A7, r24
		SPI_SPIEnumSendData(Fan_u16Speed);
    33cc:	80 91 a7 00 	lds	r24, 0x00A7
    33d0:	0e 94 11 08 	call	0x1022	; 0x1022 <SPI_SPIEnumSendData>
    33d4:	23 c0       	rjmp	.+70     	; 0x341c <fan_crtl+0x12e>
		break;
		case 3:
		Timer_voidsetPWM(100);
    33d6:	84 e6       	ldi	r24, 0x64	; 100
    33d8:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Timer_voidsetPWM>
		Fan_u16Speed=Timer_getPWMdutycycle();
    33dc:	0e 94 16 07 	call	0xe2c	; 0xe2c <Timer_getPWMdutycycle>
    33e0:	80 93 a7 00 	sts	0x00A7, r24
		SPI_SPIEnumSendData(Fan_u16Speed);
    33e4:	80 91 a7 00 	lds	r24, 0x00A7
    33e8:	0e 94 11 08 	call	0x1022	; 0x1022 <SPI_SPIEnumSendData>
    33ec:	17 c0       	rjmp	.+46     	; 0x341c <fan_crtl+0x12e>
		break;
		case 4:
		Timer_voidsetPWM(50);
    33ee:	82 e3       	ldi	r24, 0x32	; 50
    33f0:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Timer_voidsetPWM>
		Fan_u16Speed=Timer_getPWMdutycycle();
    33f4:	0e 94 16 07 	call	0xe2c	; 0xe2c <Timer_getPWMdutycycle>
    33f8:	80 93 a7 00 	sts	0x00A7, r24
		SPI_SPIEnumSendData(Fan_u16Speed);
    33fc:	80 91 a7 00 	lds	r24, 0x00A7
    3400:	0e 94 11 08 	call	0x1022	; 0x1022 <SPI_SPIEnumSendData>
    3404:	0b c0       	rjmp	.+22     	; 0x341c <fan_crtl+0x12e>
		break;
		case 5:
		Timer_voidsetPWM(50);
    3406:	82 e3       	ldi	r24, 0x32	; 50
    3408:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Timer_voidsetPWM>
		Fan_u16Speed=Timer_getPWMdutycycle();
    340c:	0e 94 16 07 	call	0xe2c	; 0xe2c <Timer_getPWMdutycycle>
    3410:	80 93 a7 00 	sts	0x00A7, r24
		SPI_SPIEnumSendData(Fan_u16Speed);
    3414:	80 91 a7 00 	lds	r24, 0x00A7
    3418:	0e 94 11 08 	call	0x1022	; 0x1022 <SPI_SPIEnumSendData>
		break;
	}

}
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <Receive_from_Master_MC>:
//    DIO_DioEnumReadChannel(DIO_u8_PORTC,DIO_u8_PIN1,&Read_u8Led_2);
//    DIO_DioEnumReadChannel(DIO_u8_PORTC,DIO_u8_PIN2,&Read_u8Led_3);
//}

void Receive_from_Master_MC(void)
{
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	00 d0       	rcall	.+0      	; 0x342e <Receive_from_Master_MC+0x6>
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
	Temperature_u16Value = ADC_Read(CH_0);
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	0e 94 75 12 	call	0x24ea	; 0x24ea <ADC_Read>
    3438:	90 93 a5 00 	sts	0x00A5, r25
    343c:	80 93 a4 00 	sts	0x00A4, r24
	LCD_voidGoToXY(LCD_u8_ROW1,14);
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	6e e0       	ldi	r22, 0x0E	; 14
    3444:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <LCD_voidGoToXY>
	LCD_voidDisplayNumber(Temperature_u16Value);
    3448:	80 91 a4 00 	lds	r24, 0x00A4
    344c:	90 91 a5 00 	lds	r25, 0x00A5
    3450:	cc 01       	movw	r24, r24
    3452:	a0 e0       	ldi	r26, 0x00	; 0
    3454:	b0 e0       	ldi	r27, 0x00	; 0
    3456:	bc 01       	movw	r22, r24
    3458:	cd 01       	movw	r24, r26
    345a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_voidDisplayNumber>
    /* receive the data from the user */
    UART_UARTEnumReceiveData(&Receive_u8Data);
    345e:	86 ea       	ldi	r24, 0xA6	; 166
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0e 94 16 06 	call	0xc2c	; 0xc2c <UART_UARTEnumReceiveData>
    switch(Receive_u8Data)
    3466:	80 91 a6 00 	lds	r24, 0x00A6
    346a:	28 2f       	mov	r18, r24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	3a 83       	std	Y+2, r19	; 0x02
    3470:	29 83       	std	Y+1, r18	; 0x01
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	9a 81       	ldd	r25, Y+2	; 0x02
    3476:	83 30       	cpi	r24, 0x03	; 3
    3478:	91 05       	cpc	r25, r1
    347a:	61 f1       	breq	.+88     	; 0x34d4 <Receive_from_Master_MC+0xac>
    347c:	29 81       	ldd	r18, Y+1	; 0x01
    347e:	3a 81       	ldd	r19, Y+2	; 0x02
    3480:	24 30       	cpi	r18, 0x04	; 4
    3482:	31 05       	cpc	r19, r1
    3484:	5c f4       	brge	.+22     	; 0x349c <Receive_from_Master_MC+0x74>
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	9a 81       	ldd	r25, Y+2	; 0x02
    348a:	81 30       	cpi	r24, 0x01	; 1
    348c:	91 05       	cpc	r25, r1
    348e:	b1 f0       	breq	.+44     	; 0x34bc <Receive_from_Master_MC+0x94>
    3490:	29 81       	ldd	r18, Y+1	; 0x01
    3492:	3a 81       	ldd	r19, Y+2	; 0x02
    3494:	22 30       	cpi	r18, 0x02	; 2
    3496:	31 05       	cpc	r19, r1
    3498:	b9 f0       	breq	.+46     	; 0x34c8 <Receive_from_Master_MC+0xa0>
    349a:	33 c0       	rjmp	.+102    	; 0x3502 <Receive_from_Master_MC+0xda>
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	9a 81       	ldd	r25, Y+2	; 0x02
    34a0:	85 30       	cpi	r24, 0x05	; 5
    34a2:	91 05       	cpc	r25, r1
    34a4:	19 f1       	breq	.+70     	; 0x34ec <Receive_from_Master_MC+0xc4>
    34a6:	29 81       	ldd	r18, Y+1	; 0x01
    34a8:	3a 81       	ldd	r19, Y+2	; 0x02
    34aa:	25 30       	cpi	r18, 0x05	; 5
    34ac:	31 05       	cpc	r19, r1
    34ae:	c4 f0       	brlt	.+48     	; 0x34e0 <Receive_from_Master_MC+0xb8>
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	9a 81       	ldd	r25, Y+2	; 0x02
    34b4:	86 30       	cpi	r24, 0x06	; 6
    34b6:	91 05       	cpc	r25, r1
    34b8:	f9 f0       	breq	.+62     	; 0x34f8 <Receive_from_Master_MC+0xd0>
    34ba:	23 c0       	rjmp	.+70     	; 0x3502 <Receive_from_Master_MC+0xda>
    {
        case 1:  DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN0,DIO_u8_HIGH);
    34bc:	82 e0       	ldi	r24, 0x02	; 2
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	41 e0       	ldi	r20, 0x01	; 1
    34c2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    34c6:	1d c0       	rjmp	.+58     	; 0x3502 <Receive_from_Master_MC+0xda>
//                case LED_ON:   // turn off led 1
//                DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN0,DIO_u8_LOW);
//                break;
//            }
        break;
        case 2:  DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN0,DIO_u8_LOW);
    34c8:	82 e0       	ldi	r24, 0x02	; 2
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	40 e0       	ldi	r20, 0x00	; 0
    34ce:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    34d2:	17 c0       	rjmp	.+46     	; 0x3502 <Receive_from_Master_MC+0xda>
//                case LED_ON:   // turn off led 2
//                DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN1,DIO_u8_LOW);
//                break;
//            }
        break;
        case 3:  DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN1,DIO_u8_HIGH);
    34d4:	82 e0       	ldi	r24, 0x02	; 2
    34d6:	61 e0       	ldi	r22, 0x01	; 1
    34d8:	41 e0       	ldi	r20, 0x01	; 1
    34da:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    34de:	11 c0       	rjmp	.+34     	; 0x3502 <Receive_from_Master_MC+0xda>
//                case LED_ON:   // turn off led 3
//                DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_LOW);
//                break;
//            }
        break;
        case 4:  DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN1,DIO_u8_LOW);   break;
    34e0:	82 e0       	ldi	r24, 0x02	; 2
    34e2:	61 e0       	ldi	r22, 0x01	; 1
    34e4:	40 e0       	ldi	r20, 0x00	; 0
    34e6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    34ea:	0b c0       	rjmp	.+22     	; 0x3502 <Receive_from_Master_MC+0xda>
        case 5:  DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);  break;
    34ec:	82 e0       	ldi	r24, 0x02	; 2
    34ee:	62 e0       	ldi	r22, 0x02	; 2
    34f0:	41 e0       	ldi	r20, 0x01	; 1
    34f2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    34f6:	05 c0       	rjmp	.+10     	; 0x3502 <Receive_from_Master_MC+0xda>
        case 6:  DIO_DioEnumWriteChannel(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_LOW);   break;
    34f8:	82 e0       	ldi	r24, 0x02	; 2
    34fa:	62 e0       	ldi	r22, 0x02	; 2
    34fc:	40 e0       	ldi	r20, 0x00	; 0
    34fe:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_DioEnumWriteChannel>
    }
}
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <__mulsi3>:
    350c:	62 9f       	mul	r22, r18
    350e:	d0 01       	movw	r26, r0
    3510:	73 9f       	mul	r23, r19
    3512:	f0 01       	movw	r30, r0
    3514:	82 9f       	mul	r24, r18
    3516:	e0 0d       	add	r30, r0
    3518:	f1 1d       	adc	r31, r1
    351a:	64 9f       	mul	r22, r20
    351c:	e0 0d       	add	r30, r0
    351e:	f1 1d       	adc	r31, r1
    3520:	92 9f       	mul	r25, r18
    3522:	f0 0d       	add	r31, r0
    3524:	83 9f       	mul	r24, r19
    3526:	f0 0d       	add	r31, r0
    3528:	74 9f       	mul	r23, r20
    352a:	f0 0d       	add	r31, r0
    352c:	65 9f       	mul	r22, r21
    352e:	f0 0d       	add	r31, r0
    3530:	99 27       	eor	r25, r25
    3532:	72 9f       	mul	r23, r18
    3534:	b0 0d       	add	r27, r0
    3536:	e1 1d       	adc	r30, r1
    3538:	f9 1f       	adc	r31, r25
    353a:	63 9f       	mul	r22, r19
    353c:	b0 0d       	add	r27, r0
    353e:	e1 1d       	adc	r30, r1
    3540:	f9 1f       	adc	r31, r25
    3542:	bd 01       	movw	r22, r26
    3544:	cf 01       	movw	r24, r30
    3546:	11 24       	eor	r1, r1
    3548:	08 95       	ret

0000354a <__udivmodhi4>:
    354a:	aa 1b       	sub	r26, r26
    354c:	bb 1b       	sub	r27, r27
    354e:	51 e1       	ldi	r21, 0x11	; 17
    3550:	07 c0       	rjmp	.+14     	; 0x3560 <__udivmodhi4_ep>

00003552 <__udivmodhi4_loop>:
    3552:	aa 1f       	adc	r26, r26
    3554:	bb 1f       	adc	r27, r27
    3556:	a6 17       	cp	r26, r22
    3558:	b7 07       	cpc	r27, r23
    355a:	10 f0       	brcs	.+4      	; 0x3560 <__udivmodhi4_ep>
    355c:	a6 1b       	sub	r26, r22
    355e:	b7 0b       	sbc	r27, r23

00003560 <__udivmodhi4_ep>:
    3560:	88 1f       	adc	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	5a 95       	dec	r21
    3566:	a9 f7       	brne	.-22     	; 0x3552 <__udivmodhi4_loop>
    3568:	80 95       	com	r24
    356a:	90 95       	com	r25
    356c:	bc 01       	movw	r22, r24
    356e:	cd 01       	movw	r24, r26
    3570:	08 95       	ret

00003572 <__divmodsi4>:
    3572:	97 fb       	bst	r25, 7
    3574:	09 2e       	mov	r0, r25
    3576:	05 26       	eor	r0, r21
    3578:	0e d0       	rcall	.+28     	; 0x3596 <__divmodsi4_neg1>
    357a:	57 fd       	sbrc	r21, 7
    357c:	04 d0       	rcall	.+8      	; 0x3586 <__divmodsi4_neg2>
    357e:	14 d0       	rcall	.+40     	; 0x35a8 <__udivmodsi4>
    3580:	0a d0       	rcall	.+20     	; 0x3596 <__divmodsi4_neg1>
    3582:	00 1c       	adc	r0, r0
    3584:	38 f4       	brcc	.+14     	; 0x3594 <__divmodsi4_exit>

00003586 <__divmodsi4_neg2>:
    3586:	50 95       	com	r21
    3588:	40 95       	com	r20
    358a:	30 95       	com	r19
    358c:	21 95       	neg	r18
    358e:	3f 4f       	sbci	r19, 0xFF	; 255
    3590:	4f 4f       	sbci	r20, 0xFF	; 255
    3592:	5f 4f       	sbci	r21, 0xFF	; 255

00003594 <__divmodsi4_exit>:
    3594:	08 95       	ret

00003596 <__divmodsi4_neg1>:
    3596:	f6 f7       	brtc	.-4      	; 0x3594 <__divmodsi4_exit>
    3598:	90 95       	com	r25
    359a:	80 95       	com	r24
    359c:	70 95       	com	r23
    359e:	61 95       	neg	r22
    35a0:	7f 4f       	sbci	r23, 0xFF	; 255
    35a2:	8f 4f       	sbci	r24, 0xFF	; 255
    35a4:	9f 4f       	sbci	r25, 0xFF	; 255
    35a6:	08 95       	ret

000035a8 <__udivmodsi4>:
    35a8:	a1 e2       	ldi	r26, 0x21	; 33
    35aa:	1a 2e       	mov	r1, r26
    35ac:	aa 1b       	sub	r26, r26
    35ae:	bb 1b       	sub	r27, r27
    35b0:	fd 01       	movw	r30, r26
    35b2:	0d c0       	rjmp	.+26     	; 0x35ce <__udivmodsi4_ep>

000035b4 <__udivmodsi4_loop>:
    35b4:	aa 1f       	adc	r26, r26
    35b6:	bb 1f       	adc	r27, r27
    35b8:	ee 1f       	adc	r30, r30
    35ba:	ff 1f       	adc	r31, r31
    35bc:	a2 17       	cp	r26, r18
    35be:	b3 07       	cpc	r27, r19
    35c0:	e4 07       	cpc	r30, r20
    35c2:	f5 07       	cpc	r31, r21
    35c4:	20 f0       	brcs	.+8      	; 0x35ce <__udivmodsi4_ep>
    35c6:	a2 1b       	sub	r26, r18
    35c8:	b3 0b       	sbc	r27, r19
    35ca:	e4 0b       	sbc	r30, r20
    35cc:	f5 0b       	sbc	r31, r21

000035ce <__udivmodsi4_ep>:
    35ce:	66 1f       	adc	r22, r22
    35d0:	77 1f       	adc	r23, r23
    35d2:	88 1f       	adc	r24, r24
    35d4:	99 1f       	adc	r25, r25
    35d6:	1a 94       	dec	r1
    35d8:	69 f7       	brne	.-38     	; 0x35b4 <__udivmodsi4_loop>
    35da:	60 95       	com	r22
    35dc:	70 95       	com	r23
    35de:	80 95       	com	r24
    35e0:	90 95       	com	r25
    35e2:	9b 01       	movw	r18, r22
    35e4:	ac 01       	movw	r20, r24
    35e6:	bd 01       	movw	r22, r26
    35e8:	cf 01       	movw	r24, r30
    35ea:	08 95       	ret

000035ec <__prologue_saves__>:
    35ec:	2f 92       	push	r2
    35ee:	3f 92       	push	r3
    35f0:	4f 92       	push	r4
    35f2:	5f 92       	push	r5
    35f4:	6f 92       	push	r6
    35f6:	7f 92       	push	r7
    35f8:	8f 92       	push	r8
    35fa:	9f 92       	push	r9
    35fc:	af 92       	push	r10
    35fe:	bf 92       	push	r11
    3600:	cf 92       	push	r12
    3602:	df 92       	push	r13
    3604:	ef 92       	push	r14
    3606:	ff 92       	push	r15
    3608:	0f 93       	push	r16
    360a:	1f 93       	push	r17
    360c:	cf 93       	push	r28
    360e:	df 93       	push	r29
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	ca 1b       	sub	r28, r26
    3616:	db 0b       	sbc	r29, r27
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	f8 94       	cli
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	09 94       	ijmp

00003624 <__epilogue_restores__>:
    3624:	2a 88       	ldd	r2, Y+18	; 0x12
    3626:	39 88       	ldd	r3, Y+17	; 0x11
    3628:	48 88       	ldd	r4, Y+16	; 0x10
    362a:	5f 84       	ldd	r5, Y+15	; 0x0f
    362c:	6e 84       	ldd	r6, Y+14	; 0x0e
    362e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3630:	8c 84       	ldd	r8, Y+12	; 0x0c
    3632:	9b 84       	ldd	r9, Y+11	; 0x0b
    3634:	aa 84       	ldd	r10, Y+10	; 0x0a
    3636:	b9 84       	ldd	r11, Y+9	; 0x09
    3638:	c8 84       	ldd	r12, Y+8	; 0x08
    363a:	df 80       	ldd	r13, Y+7	; 0x07
    363c:	ee 80       	ldd	r14, Y+6	; 0x06
    363e:	fd 80       	ldd	r15, Y+5	; 0x05
    3640:	0c 81       	ldd	r16, Y+4	; 0x04
    3642:	1b 81       	ldd	r17, Y+3	; 0x03
    3644:	aa 81       	ldd	r26, Y+2	; 0x02
    3646:	b9 81       	ldd	r27, Y+1	; 0x01
    3648:	ce 0f       	add	r28, r30
    364a:	d1 1d       	adc	r29, r1
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	f8 94       	cli
    3650:	de bf       	out	0x3e, r29	; 62
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	cd bf       	out	0x3d, r28	; 61
    3656:	ed 01       	movw	r28, r26
    3658:	08 95       	ret

0000365a <_exit>:
    365a:	f8 94       	cli

0000365c <__stop_program>:
    365c:	ff cf       	rjmp	.-2      	; 0x365c <__stop_program>
